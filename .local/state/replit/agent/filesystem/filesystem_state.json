{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# AutoNews - Automated News Content Generation System\n\n## Overview\n\nAutoNews is a comprehensive automated news content generation platform that transforms news articles into video content and publishes them to YouTube. The system fetches trending news articles, generates AI-powered summaries, converts text to speech, creates videos with visual elements, and automatically publishes the final content to social media platforms.\n\nThe application is built as a full-stack TypeScript solution with a React frontend for dashboard management and a Node.js/Express backend handling the automated content pipeline. The system is designed to operate autonomously through scheduled jobs while providing manual override capabilities through the web interface.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for development/build\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent design\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation schemas\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ESM modules\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Database Provider**: Neon serverless PostgreSQL for cloud deployment\n- **Job Scheduling**: Node-cron for automated task execution\n- **Authentication**: Session-based authentication with JWT tokens\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL with the following schema structure:\n  - Jobs table for tracking content generation workflows\n  - Articles table for storing fetched news content\n  - Summaries table for AI-generated text summaries\n  - Audio files table for TTS-generated voice content\n  - Videos table for rendered video assets\n  - Publications table for tracking published content\n  - Users table for system administration\n- **File Storage**: External services for media assets (audio, video, thumbnails)\n- **Caching**: In-memory caching for API responses and frequently accessed data\n\n### Microservices Architecture\nThe system employs a service-oriented architecture with specialized components:\n\n1. **Content Pipeline Services**:\n   - GNews service for article fetching with rate limiting and caching\n   - NLP service for text summarization and text-to-speech conversion\n   - Video service for rendering visual content with audio overlay\n   - YouTube service for automated publishing and metadata management\n\n2. **Job Management System**:\n   - Scheduler service with cron-based automation\n   - Status tracking with progress indicators\n   - Error handling and retry mechanisms\n   - Manual job creation and management\n\n3. **Dashboard Interface**:\n   - Real-time job monitoring with live updates\n   - System health checks and metrics display\n   - Manual content creation and publishing controls\n   - Configuration management for automation parameters\n\n### API Design Patterns\n- RESTful API with standardized endpoints following `/api/resource` patterns\n- Request/response logging with structured format\n- Error handling middleware with consistent error responses\n- Health check endpoints for monitoring system status\n- Metrics endpoints for operational visibility\n\n## External Dependencies\n\n### News Data APIs\n- **GNews API**: Primary news source for article fetching with configurable topics, languages, and regions\n- Rate limiting and exponential backoff for API reliability\n\n### AI/ML Services\n- **Hugging Face API**: Text summarization using BART model\n- **Custom TTS Service**: Text-to-speech conversion (configurable endpoint)\n- **Video Rendering Service**: Custom service for video generation with audio overlay\n\n### Publishing Platforms\n- **YouTube Data API v3**: Automated video uploading with metadata, thumbnails, and privacy settings\n- OAuth 2.0 authentication flow for secure access\n\n### Infrastructure Services\n- **Neon Database**: Serverless PostgreSQL for production deployment\n- **Railway/Render**: Application hosting platforms for backend services\n- **Environment Configuration**: Secure secret management through environment variables\n\n### Development Tools\n- **Drizzle Kit**: Database schema migrations and management\n- **Vite**: Development server and build tooling\n- **ESBuild**: Production bundling for server-side code\n- **TypeScript**: Type safety across frontend and backend\n\n### Monitoring and Logging\n- **Structured Logging**: Request tracing and error taxonomy\n- **Health Checks**: Automated service monitoring\n- **Metrics Collection**: Performance and operational metrics\n- **Error Tracking**: Centralized error handling and reporting","size_bytes":4926},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { z } from \"zod\";\nimport { insertJobSchema, type Job } from \"@shared/schema\";\nimport { gnewsService } from \"./services/gnews\";\nimport { nlpService } from \"./services/nlp\";\nimport { videoService } from \"./services/video\";\nimport { youtubeService } from \"./services/youtube\";\nimport { scheduler } from \"./jobs/scheduler\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n  });\n\n  // Metrics endpoint\n  app.get(\"/api/metrics\", async (req, res) => {\n    try {\n      const metrics = await storage.getMetrics();\n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Error fetching metrics:\", error);\n      res.status(500).json({ message: \"Failed to fetch metrics\" });\n    }\n  });\n\n  // Jobs CRUD\n  app.get(\"/api/jobs\", async (req, res) => {\n    try {\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 10;\n      const status = req.query.status as string;\n      const topic = req.query.topic as string;\n\n      const filters = {\n        ...(status && { status }),\n        ...(topic && { topic }),\n      };\n\n      const jobs = await storage.getJobs({ page, limit, filters });\n      res.json(jobs);\n    } catch (error) {\n      console.error(\"Error fetching jobs:\", error);\n      res.status(500).json({ message: \"Failed to fetch jobs\" });\n    }\n  });\n\n  app.get(\"/api/jobs/:id\", async (req, res) => {\n    try {\n      const job = await storage.getJobById(req.params.id);\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      res.json(job);\n    } catch (error) {\n      console.error(\"Error fetching job:\", error);\n      res.status(500).json({ message: \"Failed to fetch job\" });\n    }\n  });\n\n  app.post(\"/api/jobs\", async (req, res) => {\n    try {\n      const jobData = insertJobSchema.parse(req.body);\n      const job = await storage.createJob(jobData);\n      \n      // Start processing the job asynchronously\n      processJob(job.id).catch(error => {\n        console.error(`Error processing job ${job.id}:`, error);\n        storage.updateJobStatus(job.id, \"failed\", error.message);\n      });\n\n      res.status(201).json(job);\n    } catch (error) {\n      console.error(\"Error creating job:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid job data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create job\" });\n    }\n  });\n\n  app.post(\"/api/jobs/:id/publish\", async (req, res) => {\n    try {\n      const job = await storage.getJobById(req.params.id);\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n\n      if (job.status !== \"completed\") {\n        return res.status(400).json({ message: \"Job must be completed before publishing\" });\n      }\n\n      const video = await storage.getVideoByJobId(job.id);\n      if (!video) {\n        return res.status(400).json({ message: \"No video found for job\" });\n      }\n\n      const publication = await youtubeService.publishVideo(job, video);\n      res.json(publication);\n    } catch (error) {\n      console.error(\"Error publishing job:\", error);\n      res.status(500).json({ message: \"Failed to publish job\" });\n    }\n  });\n\n  app.delete(\"/api/jobs/:id\", async (req, res) => {\n    try {\n      await storage.deleteJob(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting job:\", error);\n      res.status(500).json({ message: \"Failed to delete job\" });\n    }\n  });\n\n  // System status\n  app.get(\"/api/system/status\", async (req, res) => {\n    try {\n      const status = {\n        gnews: await gnewsService.checkStatus(),\n        nlp: await nlpService.checkStatus(),\n        video: await videoService.checkStatus(),\n        youtube: await youtubeService.checkStatus(),\n      };\n      res.json(status);\n    } catch (error) {\n      console.error(\"Error checking system status:\", error);\n      res.status(500).json({ message: \"Failed to check system status\" });\n    }\n  });\n\n  // Manual triggers\n  app.post(\"/api/system/sync\", async (req, res) => {\n    try {\n      await scheduler.triggerNewsSync();\n      res.json({ message: \"News sync triggered successfully\" });\n    } catch (error) {\n      console.error(\"Error triggering sync:\", error);\n      res.status(500).json({ message: \"Failed to trigger sync\" });\n    }\n  });\n\n  app.post(\"/api/system/pause\", async (req, res) => {\n    try {\n      scheduler.pauseAutomation();\n      res.json({ message: \"Automation paused successfully\" });\n    } catch (error) {\n      console.error(\"Error pausing automation:\", error);\n      res.status(500).json({ message: \"Failed to pause automation\" });\n    }\n  });\n\n  app.post(\"/api/system/resume\", async (req, res) => {\n    try {\n      scheduler.resumeAutomation();\n      res.json({ message: \"Automation resumed successfully\" });\n    } catch (error) {\n      console.error(\"Error resuming automation:\", error);\n      res.status(500).json({ message: \"Failed to resume automation\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // Start the scheduler\n  scheduler.start();\n\n  return httpServer;\n}\n\nasync function processJob(jobId: string): Promise<void> {\n  try {\n    await storage.updateJobStatus(jobId, \"running\", null, 10);\n\n    // Step 1: Fetch article\n    console.log(`[${jobId}] Fetching article from GNews API`);\n    const job = await storage.getJobById(jobId);\n    if (!job) throw new Error(\"Job not found\");\n\n    const articles = await gnewsService.fetchArticles(job.topic, job.language);\n    if (!articles.length) throw new Error(\"No articles found\");\n\n    const article = await storage.createArticle({\n      jobId,\n      source: \"gnews\",\n      url: articles[0].url,\n      title: articles[0].title,\n      content: articles[0].description,\n      contentHash: generateHash(articles[0].description),\n      mediaUrl: articles[0].image,\n      publishedAt: new Date(articles[0].publishedAt),\n    });\n\n    await storage.updateJobStatus(jobId, \"running\", null, 25);\n\n    // Step 2: Generate summary\n    console.log(`[${jobId}] Generating summary`);\n    const summaryResult = await nlpService.generateSummary(\n      article.title,\n      article.content,\n      job.targetLength\n    );\n\n    const summary = await storage.createSummary({\n      jobId,\n      text: summaryResult.text,\n      wordCount: summaryResult.wordCount,\n      language: job.language,\n      qualityFlags: summaryResult.qualityFlags || {},\n    });\n\n    await storage.updateJobStatus(jobId, \"running\", null, 50);\n\n    // Step 3: Generate TTS\n    console.log(`[${jobId}] Converting text to speech`);\n    const audioResult = await nlpService.generateTTS(summary.text, job.language);\n\n    const audio = await storage.createAudio({\n      jobId,\n      url: audioResult.url,\n      duration: audioResult.duration,\n      sampleRate: audioResult.sampleRate,\n      format: audioResult.format,\n      size: audioResult.size,\n    });\n\n    await storage.updateJobStatus(jobId, \"running\", null, 75);\n\n    // Step 4: Generate video\n    console.log(`[${jobId}] Rendering video`);\n    const videoResult = await videoService.renderVideo({\n      summary: summary.text,\n      audioUrl: audio.url,\n      duration: audio.duration,\n      images: article.mediaUrl ? [article.mediaUrl] : [],\n      title: article.title,\n    });\n\n    const video = await storage.createVideo({\n      jobId,\n      urlMp4: videoResult.urlMp4,\n      urlSrt: videoResult.urlSrt,\n      urlThumb: videoResult.urlThumb,\n      width: videoResult.width,\n      height: videoResult.height,\n      duration: videoResult.duration,\n      size: videoResult.size,\n    });\n\n    await storage.updateJobStatus(jobId, \"completed\", null, 100);\n\n    // Step 5: Auto-publish if enabled\n    if (job.autoPublish) {\n      console.log(`[${jobId}] Auto-publishing to YouTube`);\n      await youtubeService.publishVideo(job, video);\n    }\n\n    console.log(`[${jobId}] Job completed successfully`);\n  } catch (error) {\n    console.error(`[${jobId}] Job failed:`, error);\n    await storage.updateJobStatus(jobId, \"failed\", error instanceof Error ? error.message : \"Unknown error\");\n  }\n}\n\nfunction generateHash(content: string): string {\n  // Simple hash function - in production, use crypto\n  let hash = 0;\n  for (let i = 0; i < content.length; i++) {\n    const char = content.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32-bit integer\n  }\n  return Math.abs(hash).toString(16);\n}\n","size_bytes":8727},"server/storage.ts":{"content":"import { \n  jobs, \n  articles, \n  summaries, \n  audioFiles, \n  videos, \n  publications, \n  users,\n  type Job, \n  type InsertJob,\n  type Article,\n  type InsertArticle,\n  type Summary,\n  type InsertSummary,\n  type AudioFile,\n  type InsertAudioFile,\n  type Video,\n  type InsertVideo,\n  type Publication,\n  type InsertPublication,\n  type User, \n  type InsertUser \n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, lte, inArray, sql, count } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Job methods\n  getJobs(params: { page: number; limit: number; filters?: any }): Promise<{ data: Job[]; total: number; page: number; limit: number; totalPages: number }>;\n  getJobById(id: string): Promise<Job | undefined>;\n  getJobsByTopic(topic: string, daysSince?: number): Promise<Job[]>;\n  getStuckJobs(minutesThreshold: number): Promise<Job[]>;\n  createJob(job: InsertJob): Promise<Job>;\n  updateJobStatus(id: string, status: string, error?: string | null, progress?: number): Promise<void>;\n  deleteJob(id: string): Promise<void>;\n  deleteJobsOlderThan(date: Date): Promise<number>;\n\n  // Article methods\n  getArticleByJobId(jobId: string): Promise<Article | undefined>;\n  createArticle(article: InsertArticle): Promise<Article>;\n  getExistingArticleHashes(hashes: string[]): Promise<string[]>;\n\n  // Summary methods\n  getSummaryByJobId(jobId: string): Promise<Summary | undefined>;\n  createSummary(summary: InsertSummary): Promise<Summary>;\n\n  // Audio methods\n  getAudioByJobId(jobId: string): Promise<AudioFile | undefined>;\n  createAudio(audio: InsertAudioFile): Promise<AudioFile>;\n\n  // Video methods\n  getVideoByJobId(jobId: string): Promise<Video | undefined>;\n  createVideo(video: InsertVideo): Promise<Video>;\n\n  // Publication methods\n  createPublication(publication: InsertPublication): Promise<Publication>;\n\n  // Metrics\n  getMetrics(): Promise<{\n    jobsToday: number;\n    successRate: number;\n    avgRenderTime: string;\n    published: number;\n    activeJobs: number;\n    totalJobs: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async getJobs(params: { page: number; limit: number; filters?: any }) {\n    const { page, limit, filters = {} } = params;\n    const offset = (page - 1) * limit;\n\n    // Build where conditions\n    let whereConditions = [];\n    \n    if (filters.status) {\n      whereConditions.push(eq(jobs.status, filters.status));\n    }\n    if (filters.topic) {\n      whereConditions.push(sql`${jobs.topic} ILIKE ${`%${filters.topic}%`}`);\n    }\n    if (filters.language) {\n      whereConditions.push(eq(jobs.language, filters.language));\n    }\n    if (filters.dateFrom) {\n      whereConditions.push(gte(jobs.createdAt, new Date(filters.dateFrom)));\n    }\n    if (filters.dateTo) {\n      whereConditions.push(lte(jobs.createdAt, new Date(filters.dateTo)));\n    }\n\n    const whereClause = whereConditions.length > 0 ? and(...whereConditions) : undefined;\n\n    // Get total count\n    const [{ count: totalCount }] = await db\n      .select({ count: count() })\n      .from(jobs)\n      .where(whereClause);\n\n    // Get paginated jobs\n    const jobsData = await db\n      .select()\n      .from(jobs)\n      .where(whereClause)\n      .orderBy(desc(jobs.createdAt))\n      .limit(limit)\n      .offset(offset);\n\n    return {\n      data: jobsData,\n      total: totalCount,\n      page,\n      limit,\n      totalPages: Math.ceil(totalCount / limit),\n    };\n  }\n\n  async getJobById(id: string): Promise<Job | undefined> {\n    const [job] = await db.select().from(jobs).where(eq(jobs.id, id));\n    return job || undefined;\n  }\n\n  async getJobsByTopic(topic: string, daysSince = 1): Promise<Job[]> {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - daysSince);\n\n    return await db\n      .select()\n      .from(jobs)\n      .where(and(\n        eq(jobs.topic, topic),\n        gte(jobs.createdAt, cutoffDate)\n      ))\n      .orderBy(desc(jobs.createdAt));\n  }\n\n  async getStuckJobs(minutesThreshold: number): Promise<Job[]> {\n    const cutoffTime = new Date();\n    cutoffTime.setMinutes(cutoffTime.getMinutes() - minutesThreshold);\n\n    return await db\n      .select()\n      .from(jobs)\n      .where(and(\n        eq(jobs.status, \"running\"),\n        lte(jobs.updatedAt, cutoffTime)\n      ));\n  }\n\n  async createJob(job: InsertJob): Promise<Job> {\n    const [newJob] = await db\n      .insert(jobs)\n      .values({\n        ...job,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .returning();\n    return newJob;\n  }\n\n  async updateJobStatus(id: string, status: string, error?: string | null, progress?: number): Promise<void> {\n    const updateData: any = {\n      status,\n      updatedAt: new Date(),\n    };\n\n    if (error !== undefined) {\n      updateData.error = error;\n    }\n    if (progress !== undefined) {\n      updateData.progress = progress;\n    }\n\n    await db\n      .update(jobs)\n      .set(updateData)\n      .where(eq(jobs.id, id));\n  }\n\n  async deleteJob(id: string): Promise<void> {\n    await db.delete(jobs).where(eq(jobs.id, id));\n  }\n\n  async deleteJobsOlderThan(date: Date): Promise<number> {\n    const result = await db\n      .delete(jobs)\n      .where(lte(jobs.createdAt, date))\n      .returning({ id: jobs.id });\n    \n    return result.length;\n  }\n\n  async getArticleByJobId(jobId: string): Promise<Article | undefined> {\n    const [article] = await db.select().from(articles).where(eq(articles.jobId, jobId));\n    return article || undefined;\n  }\n\n  async createArticle(article: InsertArticle): Promise<Article> {\n    const [newArticle] = await db\n      .insert(articles)\n      .values({\n        ...article,\n        createdAt: new Date(),\n      })\n      .returning();\n    return newArticle;\n  }\n\n  async getExistingArticleHashes(hashes: string[]): Promise<string[]> {\n    if (hashes.length === 0) return [];\n    \n    const existing = await db\n      .select({ contentHash: articles.contentHash })\n      .from(articles)\n      .where(inArray(articles.contentHash, hashes));\n    \n    return existing.map(a => a.contentHash);\n  }\n\n  async getSummaryByJobId(jobId: string): Promise<Summary | undefined> {\n    const [summary] = await db.select().from(summaries).where(eq(summaries.jobId, jobId));\n    return summary || undefined;\n  }\n\n  async createSummary(summary: InsertSummary): Promise<Summary> {\n    const [newSummary] = await db\n      .insert(summaries)\n      .values({\n        ...summary,\n        createdAt: new Date(),\n      })\n      .returning();\n    return newSummary;\n  }\n\n  async getAudioByJobId(jobId: string): Promise<AudioFile | undefined> {\n    const [audio] = await db.select().from(audioFiles).where(eq(audioFiles.jobId, jobId));\n    return audio || undefined;\n  }\n\n  async createAudio(audio: InsertAudioFile): Promise<AudioFile> {\n    const [newAudio] = await db\n      .insert(audioFiles)\n      .values({\n        ...audio,\n        createdAt: new Date(),\n      })\n      .returning();\n    return newAudio;\n  }\n\n  async getVideoByJobId(jobId: string): Promise<Video | undefined> {\n    const [video] = await db.select().from(videos).where(eq(videos.jobId, jobId));\n    return video || undefined;\n  }\n\n  async createVideo(video: InsertVideo): Promise<Video> {\n    const [newVideo] = await db\n      .insert(videos)\n      .values({\n        ...video,\n        createdAt: new Date(),\n      })\n      .returning();\n    return newVideo;\n  }\n\n  async createPublication(publication: InsertPublication): Promise<Publication> {\n    const [newPublication] = await db\n      .insert(publications)\n      .values({\n        ...publication,\n        createdAt: new Date(),\n      })\n      .returning();\n    return newPublication;\n  }\n\n  async getMetrics() {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    // Jobs today\n    const [{ count: jobsToday }] = await db\n      .select({ count: count() })\n      .from(jobs)\n      .where(gte(jobs.createdAt, today));\n\n    // Total jobs\n    const [{ count: totalJobs }] = await db\n      .select({ count: count() })\n      .from(jobs);\n\n    // Success rate (last 30 days)\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n    const [{ count: totalRecent }] = await db\n      .select({ count: count() })\n      .from(jobs)\n      .where(gte(jobs.createdAt, thirtyDaysAgo));\n\n    const [{ count: successfulRecent }] = await db\n      .select({ count: count() })\n      .from(jobs)\n      .where(and(\n        gte(jobs.createdAt, thirtyDaysAgo),\n        eq(jobs.status, \"completed\")\n      ));\n\n    const successRate = totalRecent > 0 ? (successfulRecent / totalRecent) * 100 : 0;\n\n    // Active jobs\n    const [{ count: activeJobs }] = await db\n      .select({ count: count() })\n      .from(jobs)\n      .where(eq(jobs.status, \"running\"));\n\n    // Published today\n    const [{ count: published }] = await db\n      .select({ count: count() })\n      .from(publications)\n      .where(gte(publications.createdAt, today));\n\n    return {\n      jobsToday,\n      successRate: Math.round(successRate * 10) / 10,\n      avgRenderTime: \"2.4m\", // This would need actual calculation from job timestamps\n      published,\n      activeJobs,\n      totalJobs,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9932},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const jobs = pgTable(\"jobs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  topic: text(\"topic\").notNull(),\n  language: text(\"language\").notNull().default(\"en\"),\n  targetLength: integer(\"target_length\").notNull().default(90),\n  autoPublish: boolean(\"auto_publish\").notNull().default(false),\n  status: text(\"status\").notNull().default(\"queued\"), // queued, running, completed, failed\n  progress: integer(\"progress\").notNull().default(0), // 0-100\n  steps: jsonb(\"steps\").default([]), // array of completed steps\n  error: text(\"error\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const articles = pgTable(\"articles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: varchar(\"job_id\").notNull().references(() => jobs.id, { onDelete: \"cascade\" }),\n  source: text(\"source\").notNull(), // \"gnews\"\n  url: text(\"url\").notNull(),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  contentHash: text(\"content_hash\").notNull(),\n  mediaUrl: text(\"media_url\"),\n  publishedAt: timestamp(\"published_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const summaries = pgTable(\"summaries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: varchar(\"job_id\").notNull().references(() => jobs.id, { onDelete: \"cascade\" }),\n  text: text(\"text\").notNull(),\n  wordCount: integer(\"word_count\").notNull(),\n  language: text(\"language\").notNull(),\n  qualityFlags: jsonb(\"quality_flags\").default({}),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const audioFiles = pgTable(\"audio_files\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: varchar(\"job_id\").notNull().references(() => jobs.id, { onDelete: \"cascade\" }),\n  url: text(\"url\").notNull(),\n  duration: integer(\"duration\").notNull(), // seconds\n  sampleRate: integer(\"sample_rate\").notNull(),\n  format: text(\"format\").notNull().default(\"wav\"),\n  size: integer(\"size\"), // bytes\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const videos = pgTable(\"videos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: varchar(\"job_id\").notNull().references(() => jobs.id, { onDelete: \"cascade\" }),\n  urlMp4: text(\"url_mp4\").notNull(),\n  urlSrt: text(\"url_srt\"),\n  urlThumb: text(\"url_thumb\"),\n  width: integer(\"width\").notNull(),\n  height: integer(\"height\").notNull(),\n  duration: integer(\"duration\").notNull(), // seconds\n  size: integer(\"size\"), // bytes\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const publications = pgTable(\"publications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: varchar(\"job_id\").notNull().references(() => jobs.id, { onDelete: \"cascade\" }),\n  platform: text(\"platform\").notNull(), // \"youtube\"\n  videoId: text(\"video_id\").notNull(), // platform-specific ID\n  status: text(\"status\").notNull(), // \"uploaded\", \"processing\", \"published\", \"failed\"\n  publishedAt: timestamp(\"published_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const jobsRelations = relations(jobs, ({ one, many }) => ({\n  article: one(articles),\n  summary: one(summaries),\n  audio: one(audioFiles),\n  video: one(videos),\n  publications: many(publications),\n}));\n\nexport const articlesRelations = relations(articles, ({ one }) => ({\n  job: one(jobs, { fields: [articles.jobId], references: [jobs.id] }),\n}));\n\nexport const summariesRelations = relations(summaries, ({ one }) => ({\n  job: one(jobs, { fields: [summaries.jobId], references: [jobs.id] }),\n}));\n\nexport const audioFilesRelations = relations(audioFiles, ({ one }) => ({\n  job: one(jobs, { fields: [audioFiles.jobId], references: [jobs.id] }),\n}));\n\nexport const videosRelations = relations(videos, ({ one }) => ({\n  job: one(jobs, { fields: [videos.jobId], references: [jobs.id] }),\n}));\n\nexport const publicationsRelations = relations(publications, ({ one }) => ({\n  job: one(jobs, { fields: [publications.jobId], references: [jobs.id] }),\n}));\n\n// Schemas\nexport const insertJobSchema = createInsertSchema(jobs).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertArticleSchema = createInsertSchema(articles).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSummarySchema = createInsertSchema(summaries).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAudioSchema = createInsertSchema(audioFiles).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertVideoSchema = createInsertSchema(videos).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPublicationSchema = createInsertSchema(publications).omit({\n  id: true,\n  createdAt: true,\n  publishedAt: true,\n});\n\n// Types\nexport type Job = typeof jobs.$inferSelect;\nexport type InsertJob = z.infer<typeof insertJobSchema>;\nexport type Article = typeof articles.$inferSelect;\nexport type InsertArticle = z.infer<typeof insertArticleSchema>;\nexport type Summary = typeof summaries.$inferSelect;\nexport type InsertSummary = z.infer<typeof insertSummarySchema>;\nexport type AudioFile = typeof audioFiles.$inferSelect;\nexport type InsertAudioFile = z.infer<typeof insertAudioSchema>;\nexport type Video = typeof videos.$inferSelect;\nexport type InsertVideo = z.infer<typeof insertVideoSchema>;\nexport type Publication = typeof publications.$inferSelect;\nexport type InsertPublication = z.infer<typeof insertPublicationSchema>;\n\n// User schema (keeping existing)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":6230},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport JobDetail from \"@/pages/job-detail\";\nimport CreateJob from \"@/pages/create-job\";\nimport Settings from \"@/pages/settings\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/jobs/create\" component={CreateJob} />\n      <Route path=\"/jobs/:id\" component={JobDetail} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-slate-50\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1080},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/jobs/scheduler.ts":{"content":"import cron from 'node-cron';\nimport { gnewsService } from '../services/gnews';\nimport { storage } from '../storage';\nimport type { InsertJob } from '@shared/schema';\n\nclass JobScheduler {\n  private cronJobs: Map<string, cron.ScheduledTask> = new Map();\n  private isPaused = false;\n  private defaultTopics = [\n    \"technology\",\n    \"artificial intelligence\",\n    \"climate change\", \n    \"economy\",\n    \"health\",\n    \"science\",\n    \"global politics\"\n  ];\n\n  start(): void {\n    console.log(\"Starting job scheduler...\");\n\n    // Daily news sync at 8 AM, 2 PM, and 8 PM UTC\n    const dailySync = cron.schedule('0 8,14,20 * * *', async () => {\n      if (!this.isPaused) {\n        await this.performDailySync();\n      }\n    }, {\n      scheduled: true,\n      timezone: \"UTC\"\n    });\n\n    this.cronJobs.set('dailySync', dailySync);\n\n    // Health check every 15 minutes\n    const healthCheck = cron.schedule('*/15 * * * *', async () => {\n      if (!this.isPaused) {\n        await this.performHealthCheck();\n      }\n    }, {\n      scheduled: true,\n      timezone: \"UTC\"\n    });\n\n    this.cronJobs.set('healthCheck', healthCheck);\n\n    // Cleanup old jobs daily at midnight\n    const cleanup = cron.schedule('0 0 * * *', async () => {\n      await this.cleanupOldJobs();\n    }, {\n      scheduled: true,\n      timezone: \"UTC\"\n    });\n\n    this.cronJobs.set('cleanup', cleanup);\n\n    console.log(\"Job scheduler started successfully\");\n  }\n\n  stop(): void {\n    console.log(\"Stopping job scheduler...\");\n    this.cronJobs.forEach((job, name) => {\n      job.destroy();\n      console.log(`Stopped cron job: ${name}`);\n    });\n    this.cronJobs.clear();\n    console.log(\"Job scheduler stopped\");\n  }\n\n  pauseAutomation(): void {\n    this.isPaused = true;\n    console.log(\"Automation paused\");\n  }\n\n  resumeAutomation(): void {\n    this.isPaused = false;\n    console.log(\"Automation resumed\");\n  }\n\n  async triggerNewsSync(): Promise<void> {\n    console.log(\"Manual news sync triggered\");\n    await this.performDailySync();\n  }\n\n  private async performDailySync(): Promise<void> {\n    try {\n      console.log(\"Starting daily news sync...\");\n      \n      const syncPromises = this.defaultTopics.map(async (topic) => {\n        try {\n          // Check if we already have recent jobs for this topic\n          const recentJobs = await storage.getJobsByTopic(topic, 1); // Get jobs from last 1 day\n          if (recentJobs.length >= 3) {\n            console.log(`Skipping ${topic} - already has ${recentJobs.length} recent jobs`);\n            return;\n          }\n\n          // Fetch trending articles for this topic\n          const articles = await gnewsService.fetchArticles(topic, \"en\", 5);\n          \n          if (articles.length === 0) {\n            console.log(`No articles found for topic: ${topic}`);\n            return;\n          }\n\n          // Get existing article hashes to avoid duplicates\n          const existingHashes = await storage.getExistingArticleHashes(articles.map(a => \n            this.generateContentHash(a.description)\n          ));\n\n          // Filter out duplicates\n          const newArticles = articles.filter(article => \n            !existingHashes.includes(this.generateContentHash(article.description))\n          );\n\n          if (newArticles.length === 0) {\n            console.log(`No new articles for topic: ${topic}`);\n            return;\n          }\n\n          // Create jobs for new articles (limit to 2 per topic per sync)\n          const articlesToProcess = newArticles.slice(0, 2);\n          \n          for (const article of articlesToProcess) {\n            const jobData: InsertJob = {\n              topic: topic,\n              language: \"en\",\n              targetLength: this.getRandomTargetLength(),\n              autoPublish: true,\n              status: \"queued\",\n              progress: 0,\n              steps: [],\n            };\n\n            const job = await storage.createJob(jobData);\n            console.log(`Created job ${job.id} for topic: ${topic}`);\n            \n            // Add small delay between job creations\n            await new Promise(resolve => setTimeout(resolve, 1000));\n          }\n\n        } catch (error) {\n          console.error(`Error processing topic ${topic}:`, error);\n        }\n      });\n\n      await Promise.allSettled(syncPromises);\n      console.log(\"Daily news sync completed\");\n\n    } catch (error) {\n      console.error(\"Error in daily sync:\", error);\n    }\n  }\n\n  private async performHealthCheck(): Promise<void> {\n    try {\n      // Check for stuck jobs (running for more than 30 minutes)\n      const stuckJobs = await storage.getStuckJobs(30); // 30 minutes\n      \n      for (const job of stuckJobs) {\n        console.log(`Found stuck job: ${job.id}, resetting to failed`);\n        await storage.updateJobStatus(job.id, \"failed\", \"Job timed out\");\n      }\n\n      // Log system stats\n      const metrics = await storage.getMetrics();\n      console.log(`Health check - Active jobs: ${metrics.activeJobs}, Success rate: ${metrics.successRate}%`);\n\n    } catch (error) {\n      console.error(\"Error in health check:\", error);\n    }\n  }\n\n  private async cleanupOldJobs(): Promise<void> {\n    try {\n      console.log(\"Starting job cleanup...\");\n      \n      // Delete jobs older than 30 days\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - 30);\n      \n      const deletedCount = await storage.deleteJobsOlderThan(cutoffDate);\n      console.log(`Cleaned up ${deletedCount} old jobs`);\n\n    } catch (error) {\n      console.error(\"Error in cleanup:\", error);\n    }\n  }\n\n  private generateContentHash(content: string): string {\n    // Simple hash function - in production, use crypto\n    let hash = 0;\n    for (let i = 0; i < content.length; i++) {\n      const char = content.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash).toString(16);\n  }\n\n  private getRandomTargetLength(): number {\n    const lengths = [60, 90, 120]; // seconds\n    return lengths[Math.floor(Math.random() * lengths.length)];\n  }\n}\n\nexport const scheduler = new JobScheduler();\n","size_bytes":6140},"server/services/gnews.ts":{"content":"interface GNewsArticle {\n  title: string;\n  description: string;\n  url: string;\n  image: string | null;\n  publishedAt: string;\n  source: {\n    name: string;\n    url: string;\n  };\n}\n\ninterface GNewsResponse {\n  totalArticles: number;\n  articles: GNewsArticle[];\n}\n\nclass GNewsService {\n  private readonly apiKey: string;\n  private readonly baseUrl = \"https://gnews.io/api/v4\";\n  private readonly cache = new Map<string, { data: GNewsArticle[]; timestamp: number }>();\n  private readonly cacheTimeout = 5 * 60 * 1000; // 5 minutes\n\n  constructor() {\n    this.apiKey = process.env.GNEWS_API_KEY || process.env.API_KEY || \"\";\n    if (!this.apiKey) {\n      console.warn(\"GNews API key not found. Set GNEWS_API_KEY environment variable.\");\n    }\n  }\n\n  async checkStatus(): Promise<{ status: string; message?: string }> {\n    try {\n      const response = await fetch(`${this.baseUrl}/top-headlines?lang=en&max=1&token=${this.apiKey}`);\n      if (response.ok) {\n        return { status: \"operational\" };\n      } else {\n        return { status: \"degraded\", message: `HTTP ${response.status}` };\n      }\n    } catch (error) {\n      return { status: \"down\", message: error instanceof Error ? error.message : \"Unknown error\" };\n    }\n  }\n\n  async fetchArticles(topic: string, language = \"en\", maxResults = 10): Promise<GNewsArticle[]> {\n    const cacheKey = `${topic}-${language}-${maxResults}`;\n    const cached = this.cache.get(cacheKey);\n\n    if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {\n      return cached.data;\n    }\n\n    if (!this.apiKey) {\n      throw new Error(\"GNews API key not configured\");\n    }\n\n    try {\n      const params = new URLSearchParams({\n        q: topic,\n        lang: language,\n        max: maxResults.toString(),\n        token: this.apiKey,\n      });\n\n      const response = await fetch(`${this.baseUrl}/search?${params}`);\n      \n      if (!response.ok) {\n        throw new Error(`GNews API error: ${response.status} ${response.statusText}`);\n      }\n\n      const data: GNewsResponse = await response.json();\n      \n      // Filter out articles without descriptions or images\n      const filteredArticles = data.articles.filter(article => \n        article.description && article.description.length > 50\n      );\n\n      this.cache.set(cacheKey, { data: filteredArticles, timestamp: Date.now() });\n      return filteredArticles;\n    } catch (error) {\n      console.error(\"Error fetching from GNews:\", error);\n      throw error;\n    }\n  }\n\n  async fetchTrendingTopics(language = \"en\"): Promise<string[]> {\n    if (!this.apiKey) {\n      throw new Error(\"GNews API key not configured\");\n    }\n\n    try {\n      const params = new URLSearchParams({\n        lang: language,\n        max: \"50\",\n        token: this.apiKey,\n      });\n\n      const response = await fetch(`${this.baseUrl}/top-headlines?${params}`);\n      \n      if (!response.ok) {\n        throw new Error(`GNews API error: ${response.status} ${response.statusText}`);\n      }\n\n      const data: GNewsResponse = await response.json();\n      \n      // Extract topics from titles (simplified approach)\n      const topics = new Set<string>();\n      data.articles.forEach(article => {\n        const words = article.title.toLowerCase().split(/\\s+/);\n        words.forEach(word => {\n          if (word.length > 4 && !['this', 'that', 'with', 'from', 'they', 'have', 'will', 'been', 'says'].includes(word)) {\n            topics.add(word);\n          }\n        });\n      });\n\n      return Array.from(topics).slice(0, 10);\n    } catch (error) {\n      console.error(\"Error fetching trending topics:\", error);\n      throw error;\n    }\n  }\n}\n\nexport const gnewsService = new GNewsService();\n","size_bytes":3672},"server/services/nlp.ts":{"content":"interface SummaryResult {\n  text: string;\n  wordCount: number;\n  qualityFlags?: Record<string, any>;\n}\n\ninterface TTSResult {\n  url: string;\n  duration: number;\n  sampleRate: number;\n  format: string;\n  size: number;\n}\n\nclass NLPService {\n  private readonly summarizerUrl: string;\n  private readonly ttsUrl: string;\n\n  constructor() {\n    this.summarizerUrl = process.env.SUMMARIZER_URL || \"https://api.huggingface.co/models/facebook/bart-large-cnn\";\n    this.ttsUrl = process.env.TTS_URL || \"http://localhost:8001\";\n  }\n\n  async checkStatus(): Promise<{ status: string; message?: string }> {\n    try {\n      // Check summarizer\n      const summarizerResponse = await fetch(`${this.summarizerUrl}/health`, { \n        method: 'GET',\n        timeout: 5000 \n      }).catch(() => ({ ok: false, status: 500 }));\n\n      // Check TTS service\n      const ttsResponse = await fetch(`${this.ttsUrl}/health`, {\n        method: 'GET',\n        timeout: 5000\n      }).catch(() => ({ ok: false, status: 500 }));\n\n      if (summarizerResponse.ok && ttsResponse.ok) {\n        return { status: \"operational\" };\n      } else if (summarizerResponse.ok || ttsResponse.ok) {\n        return { status: \"degraded\", message: \"One service is down\" };\n      } else {\n        return { status: \"down\", message: \"Both services unavailable\" };\n      }\n    } catch (error) {\n      return { status: \"down\", message: error instanceof Error ? error.message : \"Unknown error\" };\n    }\n  }\n\n  async generateSummary(title: string, content: string, targetLengthSeconds = 90): Promise<SummaryResult> {\n    try {\n      // Estimate target word count (average 150 words per minute for speech)\n      const targetWords = Math.round((targetLengthSeconds / 60) * 150 * 0.8); // 80% to account for pauses\n\n      const payload = {\n        inputs: `Summarize this news article in approximately ${targetWords} words:\\n\\nTitle: ${title}\\n\\nContent: ${content}`,\n        parameters: {\n          max_length: Math.min(targetWords + 20, 512),\n          min_length: Math.max(targetWords - 20, 50),\n          do_sample: false,\n          early_stopping: true,\n        },\n      };\n\n      const response = await fetch(this.summarizerUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${process.env.HUGGINGFACE_API_KEY || process.env.API_KEY || ''}`,\n        },\n        body: JSON.stringify(payload),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Summarizer API error: ${response.status} ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      let summaryText = '';\n\n      if (Array.isArray(result) && result[0]?.summary_text) {\n        summaryText = result[0].summary_text;\n      } else if (result.summary_text) {\n        summaryText = result.summary_text;\n      } else if (Array.isArray(result) && result[0]?.generated_text) {\n        summaryText = result[0].generated_text;\n      } else {\n        throw new Error('Invalid response format from summarizer');\n      }\n\n      // Clean up the summary\n      summaryText = this.cleanSummaryText(summaryText);\n      const wordCount = summaryText.split(/\\s+/).length;\n\n      // Quality checks\n      const qualityFlags = {\n        length_appropriate: wordCount >= targetWords * 0.7 && wordCount <= targetWords * 1.3,\n        has_key_info: summaryText.toLowerCase().includes(title.split(' ')[0].toLowerCase()),\n        no_repetition: !this.hasExcessiveRepetition(summaryText),\n      };\n\n      return {\n        text: summaryText,\n        wordCount,\n        qualityFlags,\n      };\n    } catch (error) {\n      console.error(\"Error generating summary:\", error);\n      throw error;\n    }\n  }\n\n  async generateTTS(text: string, language = \"en\", voiceId = \"default\"): Promise<TTSResult> {\n    try {\n      // Normalize text for speech\n      const normalizedText = this.normalizeTextForSpeech(text);\n\n      const payload = {\n        text: normalizedText,\n        voice_id: voiceId,\n        language: language,\n        speed: 1.0,\n        sample_rate: 22050,\n      };\n\n      const response = await fetch(`${this.ttsUrl}/tts`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n      });\n\n      if (!response.ok) {\n        throw new Error(`TTS API error: ${response.status} ${response.statusText}`);\n      }\n\n      const result = await response.json();\n\n      return {\n        url: result.audio_url,\n        duration: result.duration,\n        sampleRate: result.sample_rate,\n        format: result.format || 'wav',\n        size: result.size || 0,\n      };\n    } catch (error) {\n      console.error(\"Error generating TTS:\", error);\n      throw error;\n    }\n  }\n\n  private cleanSummaryText(text: string): string {\n    // Remove common artifacts and normalize\n    return text\n      .replace(/^(Summary:|Article:|News:)\\s*/i, '')\n      .replace(/\\s+/g, ' ')\n      .trim()\n      // Ensure proper sentence ending\n      .replace(/[.!?]\\s*$/, '') + '.';\n  }\n\n  private normalizeTextForSpeech(text: string): string {\n    return text\n      // Expand common abbreviations\n      .replace(/\\bUS\\b/g, 'United States')\n      .replace(/\\bUK\\b/g, 'United Kingdom')\n      .replace(/\\bAI\\b/g, 'A I')\n      .replace(/\\bAPI\\b/g, 'A P I')\n      .replace(/\\bCEO\\b/g, 'C E O')\n      .replace(/\\bIPO\\b/g, 'I P O')\n      // Add pauses after periods\n      .replace(/\\.\\s+/g, '. ... ')\n      // Handle numbers\n      .replace(/\\$(\\d+)([bB]illion)/g, '$1 billion dollars')\n      .replace(/\\$(\\d+)([mM]illion)/g, '$1 million dollars')\n      .replace(/(\\d+)%/g, '$1 percent');\n  }\n\n  private hasExcessiveRepetition(text: string): boolean {\n    const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);\n    const uniqueSentences = new Set(sentences.map(s => s.trim().toLowerCase()));\n    return uniqueSentences.size < sentences.length * 0.8;\n  }\n}\n\nexport const nlpService = new NLPService();\n","size_bytes":5958},"server/services/video.ts":{"content":"interface VideoRenderRequest {\n  summary: string;\n  audioUrl: string;\n  duration: number;\n  images: string[];\n  title: string;\n  theme?: string;\n}\n\ninterface VideoRenderResult {\n  urlMp4: string;\n  urlSrt?: string;\n  urlThumb: string;\n  width: number;\n  height: number;\n  duration: number;\n  size: number;\n}\n\nclass VideoService {\n  private readonly serviceUrl: string;\n\n  constructor() {\n    this.serviceUrl = process.env.VIDEO_SERVICE_URL || \"http://localhost:8002\";\n  }\n\n  async checkStatus(): Promise<{ status: string; message?: string }> {\n    try {\n      const response = await fetch(`${this.serviceUrl}/health`, {\n        method: 'GET',\n        timeout: 5000\n      });\n\n      if (response.ok) {\n        return { status: \"operational\" };\n      } else {\n        return { status: \"degraded\", message: `HTTP ${response.status}` };\n      }\n    } catch (error) {\n      return { status: \"down\", message: error instanceof Error ? error.message : \"Unknown error\" };\n    }\n  }\n\n  async renderVideo(request: VideoRenderRequest): Promise<VideoRenderResult> {\n    try {\n      const payload = {\n        summary: request.summary,\n        audio_url: request.audioUrl,\n        duration: request.duration,\n        images: request.images,\n        title: request.title,\n        theme: request.theme || \"news\",\n        output_format: {\n          width: 1920,\n          height: 1080,\n          fps: 30,\n          codec: \"h264\",\n          bitrate: \"5M\",\n        },\n        branding: {\n          logo_url: process.env.BRAND_LOGO_URL,\n          color_primary: \"#3b82f6\",\n          color_secondary: \"#1e40af\",\n          font_family: \"Inter\",\n        },\n      };\n\n      const response = await fetch(`${this.serviceUrl}/render`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n        timeout: 300000, // 5 minutes timeout for video rendering\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Video service error: ${response.status} ${response.statusText} - ${errorText}`);\n      }\n\n      const result = await response.json();\n\n      return {\n        urlMp4: result.video_url,\n        urlSrt: result.subtitle_url,\n        urlThumb: result.thumbnail_url,\n        width: result.width || 1920,\n        height: result.height || 1080,\n        duration: result.duration,\n        size: result.size || 0,\n      };\n    } catch (error) {\n      console.error(\"Error rendering video:\", error);\n      throw error;\n    }\n  }\n\n  async generateThumbnail(videoUrl: string, timestamp = 5): Promise<string> {\n    try {\n      const payload = {\n        video_url: videoUrl,\n        timestamp: timestamp,\n        width: 1280,\n        height: 720,\n        format: \"jpg\",\n      };\n\n      const response = await fetch(`${this.serviceUrl}/thumbnail`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Thumbnail service error: ${response.status} ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      return result.thumbnail_url;\n    } catch (error) {\n      console.error(\"Error generating thumbnail:\", error);\n      throw error;\n    }\n  }\n\n  async getVideoInfo(videoUrl: string): Promise<{ duration: number; width: number; height: number; size: number }> {\n    try {\n      const payload = { video_url: videoUrl };\n\n      const response = await fetch(`${this.serviceUrl}/info`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Video info service error: ${response.status} ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      return {\n        duration: result.duration,\n        width: result.width,\n        height: result.height,\n        size: result.size,\n      };\n    } catch (error) {\n      console.error(\"Error getting video info:\", error);\n      throw error;\n    }\n  }\n}\n\nexport const videoService = new VideoService();\n","size_bytes":4198},"server/services/youtube.ts":{"content":"import type { Job, Video, Publication } from \"@shared/schema\";\nimport { storage } from \"../storage\";\n\ninterface YouTubeUploadResult {\n  videoId: string;\n  status: string;\n  publishedAt?: Date;\n}\n\nclass YouTubeService {\n  private readonly clientId: string;\n  private readonly clientSecret: string;\n  private readonly redirectUri: string;\n  private accessToken: string | null = null;\n  private refreshToken: string | null = null;\n\n  constructor() {\n    this.clientId = process.env.YOUTUBE_CLIENT_ID || \"\";\n    this.clientSecret = process.env.YOUTUBE_CLIENT_SECRET || \"\";\n    this.redirectUri = process.env.YOUTUBE_REDIRECT_URI || \"urn:ietf:wg:oauth:2.0:oob\";\n    \n    if (!this.clientId || !this.clientSecret) {\n      console.warn(\"YouTube API credentials not found. Set YOUTUBE_CLIENT_ID and YOUTUBE_CLIENT_SECRET environment variables.\");\n    }\n  }\n\n  async checkStatus(): Promise<{ status: string; message?: string }> {\n    try {\n      if (!this.clientId || !this.clientSecret) {\n        return { status: \"down\", message: \"Credentials not configured\" };\n      }\n\n      // Try to get a quota check (this requires auth, so we'll simulate)\n      const response = await fetch(\"https://www.googleapis.com/youtube/v3/channels?part=id&mine=true\", {\n        headers: {\n          'Authorization': `Bearer ${this.accessToken || 'test'}`,\n        },\n      });\n\n      if (response.status === 401) {\n        return { status: \"degraded\", message: \"Authentication required\" };\n      } else if (response.status === 403) {\n        return { status: \"degraded\", message: \"Quota exceeded\" };\n      } else if (response.ok || response.status === 401) {\n        return { status: \"operational\" };\n      } else {\n        return { status: \"degraded\", message: `HTTP ${response.status}` };\n      }\n    } catch (error) {\n      return { status: \"down\", message: error instanceof Error ? error.message : \"Unknown error\" };\n    }\n  }\n\n  async publishVideo(job: Job, video: Video): Promise<Publication> {\n    try {\n      if (!this.accessToken) {\n        await this.refreshAccessToken();\n      }\n\n      // Get the summary for video metadata\n      const summary = await storage.getSummaryByJobId(job.id);\n      const article = await storage.getArticleByJobId(job.id);\n\n      const title = this.generateTitle(article?.title || job.topic);\n      const description = this.generateDescription(summary?.text || \"\", article?.url);\n      const tags = this.generateTags(job.topic, job.language);\n\n      // Upload video to YouTube\n      const uploadResult = await this.uploadToYouTube(video.urlMp4, {\n        title,\n        description,\n        tags,\n        categoryId: \"25\", // News & Politics\n        privacyStatus: \"public\",\n        thumbnail: video.urlThumb,\n      });\n\n      // Create publication record\n      const publication = await storage.createPublication({\n        jobId: job.id,\n        platform: \"youtube\",\n        videoId: uploadResult.videoId,\n        status: uploadResult.status,\n        publishedAt: uploadResult.publishedAt,\n      });\n\n      console.log(`Published video to YouTube: https://www.youtube.com/watch?v=${uploadResult.videoId}`);\n      return publication;\n    } catch (error) {\n      console.error(\"Error publishing to YouTube:\", error);\n      \n      // Create failed publication record\n      const publication = await storage.createPublication({\n        jobId: job.id,\n        platform: \"youtube\",\n        videoId: \"\",\n        status: \"failed\",\n      });\n\n      throw error;\n    }\n  }\n\n  private async uploadToYouTube(videoUrl: string, metadata: {\n    title: string;\n    description: string;\n    tags: string[];\n    categoryId: string;\n    privacyStatus: string;\n    thumbnail?: string;\n  }): Promise<YouTubeUploadResult> {\n    if (!this.accessToken) {\n      throw new Error(\"YouTube access token not available\");\n    }\n\n    // First, download the video file\n    const videoResponse = await fetch(videoUrl);\n    if (!videoResponse.ok) {\n      throw new Error(`Failed to fetch video: ${videoResponse.statusText}`);\n    }\n    \n    const videoBlob = await videoResponse.blob();\n\n    // Upload video\n    const uploadResponse = await fetch(\"https://www.googleapis.com/upload/youtube/v3/videos?uploadType=multipart&part=snippet,status\", {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${this.accessToken}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        snippet: {\n          title: metadata.title,\n          description: metadata.description,\n          tags: metadata.tags,\n          categoryId: metadata.categoryId,\n          defaultLanguage: \"en\",\n          defaultAudioLanguage: \"en\",\n        },\n        status: {\n          privacyStatus: metadata.privacyStatus,\n          embeddable: true,\n          license: \"youtube\",\n        },\n      }),\n    });\n\n    if (!uploadResponse.ok) {\n      const errorText = await uploadResponse.text();\n      throw new Error(`YouTube upload failed: ${uploadResponse.status} ${uploadResponse.statusText} - ${errorText}`);\n    }\n\n    const result = await uploadResponse.json();\n\n    // Upload thumbnail if provided\n    if (metadata.thumbnail) {\n      await this.uploadThumbnail(result.id, metadata.thumbnail);\n    }\n\n    return {\n      videoId: result.id,\n      status: result.status.uploadStatus,\n      publishedAt: result.status.publishAt ? new Date(result.status.publishAt) : new Date(),\n    };\n  }\n\n  private async uploadThumbnail(videoId: string, thumbnailUrl: string): Promise<void> {\n    try {\n      const thumbnailResponse = await fetch(thumbnailUrl);\n      if (!thumbnailResponse.ok) return;\n\n      const thumbnailBlob = await thumbnailResponse.blob();\n\n      await fetch(`https://www.googleapis.com/upload/youtube/v3/thumbnails/set?videoId=${videoId}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'Content-Type': 'image/jpeg',\n        },\n        body: thumbnailBlob,\n      });\n    } catch (error) {\n      console.error(\"Error uploading thumbnail:\", error);\n      // Don't fail the whole upload for thumbnail issues\n    }\n  }\n\n  private async refreshAccessToken(): Promise<void> {\n    if (!this.refreshToken) {\n      throw new Error(\"No refresh token available. Re-authentication required.\");\n    }\n\n    const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        client_id: this.clientId,\n        client_secret: this.clientSecret,\n        refresh_token: this.refreshToken,\n        grant_type: 'refresh_token',\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Token refresh failed: ${response.statusText}`);\n    }\n\n    const tokens = await response.json();\n    this.accessToken = tokens.access_token;\n  }\n\n  private generateTitle(originalTitle: string): string {\n    // Ensure title is under 100 characters and compelling\n    const cleanTitle = originalTitle.replace(/[^\\w\\s-]/g, '').trim();\n    const maxLength = 90;\n    \n    if (cleanTitle.length <= maxLength) {\n      return `🔥 ${cleanTitle} - Breaking News`;\n    }\n    \n    return `🔥 ${cleanTitle.substring(0, maxLength - 20)}... - Breaking News`;\n  }\n\n  private generateDescription(summary: string, sourceUrl?: string): string {\n    let description = `${summary}\\n\\n`;\n    \n    description += \"🔔 Subscribe for more breaking news updates!\\n\";\n    description += \"📢 Like and share if you found this informative!\\n\\n\";\n    \n    if (sourceUrl) {\n      description += `📰 Source: ${sourceUrl}\\n\\n`;\n    }\n    \n    description += \"⚠️ This content was automatically generated using AI technology.\\n\";\n    description += \"#breakingnews #news #ai #automated\";\n    \n    return description;\n  }\n\n  private generateTags(topic: string, language: string): string[] {\n    const baseTags = [\n      \"breaking news\",\n      \"news\",\n      \"current events\",\n      \"automated news\",\n      \"ai generated\",\n    ];\n    \n    const topicTags = topic.toLowerCase().split(/\\s+/).filter(word => word.length > 3);\n    const langTags = language === \"en\" ? [\"english news\"] : [`${language} news`];\n    \n    return [...baseTags, ...topicTags, ...langTags].slice(0, 15);\n  }\n\n  setTokens(accessToken: string, refreshToken?: string): void {\n    this.accessToken = accessToken;\n    if (refreshToken) {\n      this.refreshToken = refreshToken;\n    }\n  }\n}\n\nexport const youtubeService = new YouTubeService();\n","size_bytes":8484},"client/src/components/job-detail-modal.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  CheckCircle, \n  RefreshCw, \n  Upload, \n  Download, \n  X, \n  Play,\n  Pause,\n  AlertCircle\n} from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { JobWithDetails } from \"@/types\";\n\ninterface JobDetailModalProps {\n  job?: JobWithDetails;\n  isLoading: boolean;\n  error?: Error | null;\n  onPublish: () => void;\n  publishLoading: boolean;\n  onClose?: () => void;\n  inline?: boolean;\n}\n\nexport default function JobDetailModal({ \n  job, \n  isLoading, \n  error,\n  onPublish, \n  publishLoading, \n  onClose,\n  inline = false \n}: JobDetailModalProps) {\n  const steps = [\n    { key: \"fetch\", label: \"Fetch\", completed: !!job?.article },\n    { key: \"summarize\", label: \"Summarize\", completed: !!job?.summary },\n    { key: \"tts\", label: \"TTS\", completed: !!job?.audio },\n    { key: \"render\", label: \"Render\", completed: !!job?.video },\n    { key: \"publish\", label: \"Publish\", completed: !!job?.publications?.length },\n  ];\n\n  const currentStep = steps.findIndex(step => !step.completed);\n  const isRunning = job?.status === \"running\";\n  const isCompleted = job?.status === \"completed\";\n  const isFailed = job?.status === \"failed\";\n\n  const content = (\n    <div className=\"space-y-6\">\n      {isLoading && (\n        <div className=\"space-y-4\" data-testid=\"job-detail-loading\">\n          <Skeleton className=\"h-8 w-64\" />\n          <Skeleton className=\"h-4 w-48\" />\n          <Skeleton className=\"h-32 w-full\" />\n        </div>\n      )}\n\n      {error && (\n        <div className=\"flex items-center space-x-2 text-red-600\" data-testid=\"job-detail-error\">\n          <AlertCircle className=\"w-5 h-5\" />\n          <span>Failed to load job details</span>\n        </div>\n      )}\n\n      {job && (\n        <>\n          {/* Header */}\n          <div className=\"flex items-center justify-between\" data-testid=\"job-detail-header\">\n            <div>\n              <h2 className=\"text-xl font-bold text-slate-900\" data-testid=\"text-job-title\">\n                Job Details - {job.id.slice(0, 8)}...\n              </h2>\n              <p className=\"text-slate-600\" data-testid=\"text-job-subtitle\">\n                {job.topic} • {job.language} • {job.targetLength}s\n              </p>\n            </div>\n            {onClose && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={onClose}\n                data-testid=\"button-close-modal\"\n              >\n                <X className=\"w-5 h-5\" />\n              </Button>\n            )}\n          </div>\n\n          {/* Pipeline Progress */}\n          <div data-testid=\"pipeline-progress\">\n            <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">Pipeline Progress</h3>\n            <div className=\"flex items-center space-x-4\">\n              {steps.map((step, index) => (\n                <div key={step.key} className=\"flex flex-col items-center\">\n                  <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                    step.completed \n                      ? \"bg-green-100\" \n                      : index === currentStep && isRunning \n                        ? \"bg-blue-100\" \n                        : \"bg-slate-100\"\n                  }`}>\n                    {step.completed ? (\n                      <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                    ) : index === currentStep && isRunning ? (\n                      <RefreshCw className=\"w-5 h-5 text-blue-600 animate-spin\" />\n                    ) : (\n                      <div className={`w-3 h-3 rounded-full ${\n                        isFailed && index === currentStep ? \"bg-red-400\" : \"bg-slate-400\"\n                      }`} />\n                    )}\n                  </div>\n                  <span className=\"text-xs text-slate-500 mt-1\">{step.label}</span>\n                  {index < steps.length - 1 && (\n                    <div className={`flex-1 h-1 mx-2 rounded ${\n                      step.completed ? \"bg-green-200\" : \"bg-slate-200\"\n                    }`} />\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Left Column */}\n            <div className=\"space-y-6\">\n              {/* Summary */}\n              {job.summary && (\n                <div data-testid=\"job-summary\">\n                  <h4 className=\"text-md font-semibold text-slate-900 mb-3\">Generated Summary</h4>\n                  <div className=\"bg-slate-50 rounded-lg p-4\">\n                    <p className=\"text-sm text-slate-700 leading-relaxed\" data-testid=\"text-summary\">\n                      {job.summary.text}\n                    </p>\n                    <div className=\"mt-3 text-xs text-slate-500\">\n                      {job.summary.wordCount} words • {job.summary.language}\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Audio Preview */}\n              {job.audio && (\n                <div data-testid=\"job-audio\">\n                  <h4 className=\"text-md font-semibold text-slate-900 mb-3\">Audio Preview</h4>\n                  <div className=\"bg-slate-50 rounded-lg p-4\">\n                    <div className=\"flex items-center space-x-4\">\n                      <Button\n                        size=\"sm\"\n                        className=\"w-10 h-10 rounded-full p-0\"\n                        data-testid=\"button-play-audio\"\n                      >\n                        <Play className=\"w-4 h-4\" />\n                      </Button>\n                      <div className=\"flex-1\">\n                        <Progress value={30} className=\"h-2\" />\n                        <div className=\"flex justify-between text-xs text-slate-500 mt-1\">\n                          <span>0:15</span>\n                          <span>{Math.floor(job.audio.duration / 60)}:{(job.audio.duration % 60).toString().padStart(2, '0')}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Logs */}\n              <div data-testid=\"job-logs\">\n                <h4 className=\"text-md font-semibold text-slate-900 mb-3\">Execution Logs</h4>\n                <div className=\"bg-slate-900 rounded-lg p-4 h-40 overflow-y-auto\">\n                  <div className=\"font-mono text-xs space-y-1 text-green-400\">\n                    <div>[{new Date().toISOString().slice(0, 19)}] INFO: Job {job.id} started</div>\n                    {job.article && (\n                      <div className=\"text-blue-400\">[{new Date().toISOString().slice(0, 19)}] INFO: Article fetched successfully</div>\n                    )}\n                    {job.summary && (\n                      <div className=\"text-green-400\">[{new Date().toISOString().slice(0, 19)}] INFO: Summary generated ({job.summary.wordCount} words)</div>\n                    )}\n                    {job.audio && (\n                      <div className=\"text-green-400\">[{new Date().toISOString().slice(0, 19)}] INFO: TTS conversion completed ({job.audio.duration}s duration)</div>\n                    )}\n                    {job.video && (\n                      <div className=\"text-green-400\">[{new Date().toISOString().slice(0, 19)}] INFO: Video rendering completed</div>\n                    )}\n                    {isRunning && (\n                      <div className=\"text-yellow-400\">[{new Date().toISOString().slice(0, 19)}] INFO: Processing in progress ({job.progress}% complete)</div>\n                    )}\n                    {isFailed && job.error && (\n                      <div className=\"text-red-400\">[{new Date().toISOString().slice(0, 19)}] ERROR: {job.error}</div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Right Column */}\n            <div className=\"space-y-6\">\n              {/* Video Preview */}\n              <div data-testid=\"job-video\">\n                <h4 className=\"text-md font-semibold text-slate-900 mb-3\">Video Preview</h4>\n                {job.video ? (\n                  <div className=\"bg-slate-100 rounded-lg aspect-video flex items-center justify-center\">\n                    <video \n                      controls \n                      className=\"max-w-full max-h-full rounded\"\n                      poster={job.video.urlThumb}\n                      data-testid=\"video-player\"\n                    >\n                      <source src={job.video.urlMp4} type=\"video/mp4\" />\n                      Your browser does not support the video tag.\n                    </video>\n                  </div>\n                ) : (\n                  <div className=\"bg-slate-100 rounded-lg aspect-video flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <div className=\"w-12 h-12 bg-slate-300 rounded-lg mx-auto mb-3 flex items-center justify-center\">\n                        {isRunning ? (\n                          <RefreshCw className=\"w-6 h-6 text-slate-600 animate-spin\" />\n                        ) : (\n                          <Play className=\"w-6 h-6 text-slate-600\" />\n                        )}\n                      </div>\n                      <p className=\"text-slate-500\">\n                        {isRunning ? \"Video rendering in progress...\" : \"Video not ready\"}\n                      </p>\n                      {isRunning && (\n                        <div className=\"w-32 h-1 bg-slate-200 rounded-full mx-auto mt-2\">\n                          <div \n                            className=\"h-1 bg-blue-600 rounded-full transition-all\" \n                            style={{ width: `${job.progress}%` }}\n                          />\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Job Information */}\n              <div data-testid=\"job-information\">\n                <h4 className=\"text-md font-semibold text-slate-900 mb-3\">Job Information</h4>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-slate-600\">Created:</span>\n                    <span className=\"text-sm text-slate-900\" data-testid=\"text-created-date\">\n                      {formatDistanceToNow(new Date(job.createdAt), { addSuffix: true })}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-slate-600\">Source:</span>\n                    <span className=\"text-sm text-slate-900\">GNews API</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-slate-600\">Language:</span>\n                    <span className=\"text-sm text-slate-900\">{job.language}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-slate-600\">Target Length:</span>\n                    <span className=\"text-sm text-slate-900\">{job.targetLength} seconds</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-slate-600\">Auto Publish:</span>\n                    <span className=\"text-sm text-slate-900\">\n                      {job.autoPublish ? \"Enabled\" : \"Disabled\"}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-slate-600\">Status:</span>\n                    <Badge variant={job.status === 'completed' ? 'default' : job.status === 'failed' ? 'destructive' : 'secondary'}>\n                      {job.status}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n\n              {/* Actions */}\n              <div className=\"space-y-3\" data-testid=\"job-actions\">\n                <Button\n                  className=\"w-full\"\n                  onClick={onPublish}\n                  disabled={!isCompleted || publishLoading || !!job.publications?.length}\n                  data-testid=\"button-publish\"\n                >\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  {publishLoading ? \"Publishing...\" : \n                   job.publications?.length ? \"Published to YouTube\" :\n                   !isCompleted ? \"Publish to YouTube (Processing...)\" : \n                   \"Publish to YouTube\"}\n                </Button>\n                \n                {job.video && (\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full\"\n                    onClick={() => window.open(job.video?.urlMp4, '_blank')}\n                    data-testid=\"button-download\"\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Download Assets\n                  </Button>\n                )}\n                \n                <Button\n                  variant=\"outline\"\n                  className=\"w-full text-red-700 border-red-200 hover:bg-red-50\"\n                  disabled={isCompleted}\n                  data-testid=\"button-cancel\"\n                >\n                  <X className=\"w-4 h-4 mr-2\" />\n                  {isCompleted ? \"Job Completed\" : \"Cancel Job\"}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n  if (inline) {\n    return <div className=\"max-w-6xl mx-auto\">{content}</div>;\n  }\n\n  // Modal version (not used in current implementation but keeping for future use)\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\n      <div className=\"bg-white rounded-xl max-w-4xl w-full max-h-[90vh] overflow-hidden\">\n        <div className=\"p-6 overflow-y-auto max-h-[90vh]\">\n          {content}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14356},"client/src/components/job-table.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Search, RefreshCw, RotateCcw, CheckCircle, AlertCircle, Clock } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { Job } from \"@/types\";\n\ninterface JobTableProps {\n  jobs: Job[];\n  isLoading: boolean;\n  onRefresh: () => void;\n}\n\nconst statusConfig = {\n  queued: {\n    label: \"Queued\",\n    variant: \"secondary\" as const,\n    icon: Clock,\n    bgColor: \"bg-slate-100\",\n    textColor: \"text-slate-800\"\n  },\n  running: {\n    label: \"Running\",\n    variant: \"default\" as const,\n    icon: RefreshCw,\n    bgColor: \"bg-blue-100\",\n    textColor: \"text-blue-800\"\n  },\n  completed: {\n    label: \"Completed\",\n    variant: \"default\" as const,\n    icon: CheckCircle,\n    bgColor: \"bg-green-100\",\n    textColor: \"text-green-800\"\n  },\n  failed: {\n    label: \"Failed\",\n    variant: \"destructive\" as const,\n    icon: AlertCircle,\n    bgColor: \"bg-red-100\",\n    textColor: \"text-red-800\"\n  }\n};\n\nexport default function JobTable({ jobs, isLoading, onRefresh }: JobTableProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"\");\n\n  const filteredJobs = jobs.filter(job => {\n    const matchesSearch = job.topic.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         job.id.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = !statusFilter || job.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const StatusBadge = ({ status }: { status: Job['status'] }) => {\n    const config = statusConfig[status];\n    const Icon = config.icon;\n    \n    return (\n      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${config.bgColor} ${config.textColor}`}>\n        <Icon className={`w-3 h-3 mr-1 ${status === 'running' ? 'animate-spin' : ''}`} />\n        {config.label}\n      </span>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"border border-slate-200\" data-testid=\"job-table-loading\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Recent Jobs</CardTitle>\n            <div className=\"flex space-x-3\">\n              <Skeleton className=\"h-10 w-48\" />\n              <Skeleton className=\"h-10 w-32\" />\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[1, 2, 3, 4, 5].map((i) => (\n              <div key={i} className=\"flex items-center space-x-4 p-3 border border-slate-100 rounded\">\n                <Skeleton className=\"h-4 w-20\" />\n                <Skeleton className=\"h-4 w-32\" />\n                <Skeleton className=\"h-4 w-16\" />\n                <Skeleton className=\"h-4 w-24\" />\n                <Skeleton className=\"h-4 w-20\" />\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"border border-slate-200\" data-testid=\"job-table\">\n      <CardHeader className=\"border-b border-slate-200\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold text-slate-900\" data-testid=\"table-title\">\n            Recent Jobs\n          </CardTitle>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n              <Input\n                placeholder=\"Search jobs...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 pr-4 py-2 w-48 text-sm\"\n                data-testid=\"input-search-jobs\"\n              />\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-32 text-sm\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Status</SelectItem>\n                <SelectItem value=\"queued\">Queued</SelectItem>\n                <SelectItem value=\"running\">Running</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"failed\">Failed</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onRefresh}\n              data-testid=\"button-refresh-jobs\"\n            >\n              <RefreshCw className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\" data-testid=\"jobs-table\">\n          <thead className=\"bg-slate-50\">\n            <tr>\n              <th className=\"text-left py-3 px-6 text-sm font-medium text-slate-600\">Job ID</th>\n              <th className=\"text-left py-3 px-6 text-sm font-medium text-slate-600\">Topic</th>\n              <th className=\"text-left py-3 px-6 text-sm font-medium text-slate-600\">Status</th>\n              <th className=\"text-left py-3 px-6 text-sm font-medium text-slate-600\">Progress</th>\n              <th className=\"text-left py-3 px-6 text-sm font-medium text-slate-600\">Created</th>\n              <th className=\"text-left py-3 px-6 text-sm font-medium text-slate-600\">Actions</th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y divide-slate-200\">\n            {filteredJobs.length === 0 ? (\n              <tr>\n                <td colSpan={6} className=\"py-8 text-center text-slate-500\" data-testid=\"no-jobs-message\">\n                  {jobs.length === 0 ? \"No jobs found\" : \"No jobs match your filters\"}\n                </td>\n              </tr>\n            ) : (\n              filteredJobs.map((job) => (\n                <tr key={job.id} className=\"hover:bg-slate-50\" data-testid={`row-job-${job.id}`}>\n                  <td className=\"py-4 px-6\">\n                    <span className=\"font-mono text-sm text-slate-900\" data-testid={`text-job-id-${job.id}`}>\n                      {job.id.slice(0, 8)}...\n                    </span>\n                  </td>\n                  <td className=\"py-4 px-6\">\n                    <div>\n                      <p className=\"text-sm font-medium text-slate-900\" data-testid={`text-job-topic-${job.id}`}>\n                        {job.topic}\n                      </p>\n                      <p className=\"text-xs text-slate-500\" data-testid={`text-job-details-${job.id}`}>\n                        {job.language} • {job.targetLength}s\n                      </p>\n                    </div>\n                  </td>\n                  <td className=\"py-4 px-6\" data-testid={`status-job-${job.id}`}>\n                    <StatusBadge status={job.status} />\n                  </td>\n                  <td className=\"py-4 px-6\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Progress value={job.progress} className=\"flex-1 h-2\" />\n                      <span className=\"text-xs text-slate-500\" data-testid={`progress-job-${job.id}`}>\n                        {job.progress}%\n                      </span>\n                    </div>\n                  </td>\n                  <td className=\"py-4 px-6\">\n                    <span className=\"text-sm text-slate-500\" data-testid={`created-job-${job.id}`}>\n                      {formatDistanceToNow(new Date(job.createdAt), { addSuffix: true })}\n                    </span>\n                  </td>\n                  <td className=\"py-4 px-6\">\n                    <Link href={`/jobs/${job.id}`}>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"text-blue-600 hover:text-blue-800 p-0 h-auto font-medium\"\n                        data-testid={`button-view-job-${job.id}`}\n                      >\n                        View Details\n                      </Button>\n                    </Link>\n                  </td>\n                </tr>\n              ))\n            )}\n          </tbody>\n        </table>\n      </div>\n      \n      <div className=\"p-4 border-t border-slate-200 flex items-center justify-between\">\n        <p className=\"text-sm text-slate-500\" data-testid=\"pagination-info\">\n          Showing {filteredJobs.length} of {jobs.length} jobs\n        </p>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            disabled\n            data-testid=\"button-pagination-prev\"\n          >\n            Previous\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            data-testid=\"button-pagination-next\"\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":9417},"client/src/components/kpi-cards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  CheckCircle, \n  Clock, \n  Youtube, \n  TrendingUp,\n  TrendingDown,\n  Briefcase\n} from \"lucide-react\";\nimport type { Metrics } from \"@/types\";\n\ninterface KPICardsProps {\n  metrics?: Metrics;\n  isLoading: boolean;\n}\n\nexport default function KPICards({ metrics, isLoading }: KPICardsProps) {\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\" data-testid=\"kpi-cards-loading\">\n        {[1, 2, 3, 4].map((i) => (\n          <Card key={i} className=\"border border-slate-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-2\">\n                  <Skeleton className=\"h-4 w-20\" />\n                  <Skeleton className=\"h-8 w-16\" />\n                </div>\n                <Skeleton className=\"h-12 w-12 rounded-lg\" />\n              </div>\n              <div className=\"mt-4 flex items-center space-x-1\">\n                <Skeleton className=\"h-4 w-8\" />\n                <Skeleton className=\"h-4 w-24\" />\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const cards = [\n    {\n      title: \"Jobs Today\",\n      value: metrics?.jobsToday?.toString() || \"0\",\n      icon: Briefcase,\n      iconBg: \"bg-blue-100\",\n      iconColor: \"text-blue-600\",\n      trend: \"+12%\",\n      trendText: \"from yesterday\",\n      trendUp: true,\n      testId: \"kpi-jobs-today\"\n    },\n    {\n      title: \"Success Rate\",\n      value: `${metrics?.successRate?.toFixed(1) || \"0\"}%`,\n      icon: CheckCircle,\n      iconBg: \"bg-green-100\",\n      iconColor: \"text-green-600\",\n      trend: \"+2.1%\",\n      trendText: \"improvement\",\n      trendUp: true,\n      testId: \"kpi-success-rate\"\n    },\n    {\n      title: \"Avg Render Time\",\n      value: metrics?.avgRenderTime || \"0m\",\n      icon: Clock,\n      iconBg: \"bg-amber-100\",\n      iconColor: \"text-amber-600\",\n      trend: \"-15s\",\n      trendText: \"faster today\",\n      trendUp: true,\n      testId: \"kpi-render-time\"\n    },\n    {\n      title: \"Published\",\n      value: metrics?.published?.toString() || \"0\",\n      icon: Youtube,\n      iconBg: \"bg-purple-100\",\n      iconColor: \"text-purple-600\",\n      trend: \"\",\n      trendText: \"to YouTube today\",\n      trendUp: true,\n      testId: \"kpi-published\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\" data-testid=\"kpi-cards\">\n      {cards.map((card) => (\n        <Card key={card.title} className=\"border border-slate-200\" data-testid={card.testId}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-600\" data-testid={`${card.testId}-title`}>\n                  {card.title}\n                </p>\n                <p className=\"text-3xl font-bold text-slate-900\" data-testid={`${card.testId}-value`}>\n                  {card.value}\n                </p>\n              </div>\n              <div className={`w-12 h-12 ${card.iconBg} rounded-lg flex items-center justify-center`}>\n                <card.icon className={`${card.iconColor} w-6 h-6`} />\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              {card.trend && (\n                <>\n                  <span className={`font-medium ${card.trendUp ? 'text-green-600' : 'text-red-600'}`}>\n                    {card.trendUp ? (\n                      <TrendingUp className=\"w-4 h-4 inline mr-1\" />\n                    ) : (\n                      <TrendingDown className=\"w-4 h-4 inline mr-1\" />\n                    )}\n                    {card.trend}\n                  </span>\n                  <span className=\"text-slate-500 ml-1\">{card.trendText}</span>\n                </>\n              )}\n              {!card.trend && (\n                <span className=\"text-slate-500\">{card.trendText}</span>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":4180},"client/src/components/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  LayoutDashboard, \n  Plus, \n  List, \n  Video, \n  Settings, \n  User,\n  Newspaper,\n  LogOut\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: LayoutDashboard },\n  { name: \"Create Job\", href: \"/jobs/create\", icon: Plus },\n  { name: \"All Jobs\", href: \"/jobs\", icon: List },\n  { name: \"Published Content\", href: \"/published\", icon: Video },\n  { name: \"Settings\", href: \"/settings\", icon: Settings },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <aside className=\"w-64 bg-white border-r border-slate-200 flex flex-col\" data-testid=\"sidebar\">\n      {/* Logo */}\n      <div className=\"p-6 border-b border-slate-200\" data-testid=\"logo-section\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n            <Newspaper className=\"w-4 h-4 text-white\" />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold text-slate-900\" data-testid=\"text-app-name\">AutoNews</h1>\n            <p className=\"text-sm text-slate-500\" data-testid=\"text-app-subtitle\">Content Operations</p>\n          </div>\n        </div>\n      </div>\n      \n      {/* Navigation */}\n      <nav className=\"flex-1 p-4\" data-testid=\"navigation\">\n        <ul className=\"space-y-2\">\n          {navigation.map((item) => {\n            const isActive = location === item.href || \n              (item.href !== \"/\" && location.startsWith(item.href));\n            \n            return (\n              <li key={item.name}>\n                <Link href={item.href}>\n                  <a\n                    className={cn(\n                      \"flex items-center space-x-3 px-3 py-2 rounded-lg font-medium transition-colors\",\n                      isActive\n                        ? \"bg-blue-50 text-blue-700\"\n                        : \"text-slate-600 hover:bg-slate-100\"\n                    )}\n                    data-testid={`link-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <item.icon className=\"w-5 h-5\" />\n                    <span>{item.name}</span>\n                  </a>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n      \n      {/* User Section */}\n      <div className=\"p-4 border-t border-slate-200\" data-testid=\"user-section\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-slate-300 rounded-full flex items-center justify-center\">\n            <User className=\"w-4 h-4 text-slate-600\" />\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium text-slate-900\" data-testid=\"text-user-name\">Admin User</p>\n            <p className=\"text-xs text-slate-500\" data-testid=\"text-user-role\">Operator</p>\n          </div>\n          <button \n            className=\"text-slate-400 hover:text-slate-600\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":3184},"client/src/components/system-status.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { API } from \"@/lib/api\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Plus, \n  RefreshCw, \n  Pause, \n  BarChart3,\n  AlertCircle\n} from \"lucide-react\";\n\nconst statusColors = {\n  operational: \"bg-green-500\",\n  degraded: \"bg-amber-500\", \n  down: \"bg-red-500\"\n};\n\nconst statusLabels = {\n  operational: \"Operational\",\n  degraded: \"Degraded\",\n  down: \"Down\"\n};\n\nconst statusTextColors = {\n  operational: \"text-green-600\",\n  degraded: \"text-amber-600\",\n  down: \"text-red-600\"\n};\n\nexport default function SystemStatus() {\n  const { toast } = useToast();\n\n  const { data: status, isLoading } = useQuery({\n    queryKey: ['/api/system/status'],\n    refetchInterval: 30000, // Check every 30 seconds\n  });\n\n  const handleQuickAction = async (action: string) => {\n    try {\n      switch (action) {\n        case 'sync':\n          await API.triggerSync();\n          toast({\n            title: \"Success\",\n            description: \"News sync triggered successfully\",\n          });\n          break;\n        case 'pause':\n          await API.pauseAutomation();\n          toast({\n            title: \"Success\", \n            description: \"Automation paused\",\n          });\n          break;\n        default:\n          toast({\n            title: \"Info\",\n            description: \"Feature coming soon\",\n          });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: `Failed to ${action}`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* System Status */}\n      <Card className=\"border border-slate-200\" data-testid=\"system-status\">\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold text-slate-900\" data-testid=\"system-status-title\">\n            System Status\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"space-y-4\" data-testid=\"system-status-loading\">\n              {[1, 2, 3, 4, 5].map((i) => (\n                <div key={i} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Skeleton className=\"w-2 h-2 rounded-full\" />\n                    <Skeleton className=\"h-4 w-24\" />\n                  </div>\n                  <Skeleton className=\"h-4 w-16\" />\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {status && Object.entries(status).map(([service, serviceStatus]) => (\n                <div key={service} className=\"flex items-center justify-between\" data-testid={`service-${service}`}>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-2 h-2 ${statusColors[serviceStatus.status]} rounded-full`} />\n                    <span className=\"text-sm text-slate-600 capitalize\" data-testid={`service-${service}-name`}>\n                      {service === 'gnews' ? 'GNews API' : \n                       service === 'nlp' ? 'Summarization' :\n                       service === 'video' ? 'Video Rendering' :\n                       service === 'youtube' ? 'YouTube API' : service}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className={`text-xs font-medium ${statusTextColors[serviceStatus.status]}`} data-testid={`service-${service}-status`}>\n                      {statusLabels[serviceStatus.status]}\n                    </span>\n                    {serviceStatus.message && (\n                      <AlertCircle className=\"w-3 h-3 text-slate-400\" title={serviceStatus.message} />\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Quick Actions */}\n      <Card className=\"border border-slate-200\" data-testid=\"quick-actions\">\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold text-slate-900\" data-testid=\"quick-actions-title\">\n            Quick Actions\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            <Button\n              variant=\"outline\"\n              className=\"w-full flex items-center justify-start space-x-3 p-3 h-auto\"\n              onClick={() => window.location.href = '/jobs/create'}\n              data-testid=\"button-create-manual-job\"\n            >\n              <Plus className=\"w-4 h-4 text-blue-600\" />\n              <span className=\"text-sm font-medium text-slate-700\">Create Manual Job</span>\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"w-full flex items-center justify-start space-x-3 p-3 h-auto\"\n              onClick={() => handleQuickAction('sync')}\n              data-testid=\"button-trigger-sync\"\n            >\n              <RefreshCw className=\"w-4 h-4 text-green-600\" />\n              <span className=\"text-sm font-medium text-slate-700\">Trigger News Sync</span>\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"w-full flex items-center justify-start space-x-3 p-3 h-auto\"\n              onClick={() => handleQuickAction('pause')}\n              data-testid=\"button-pause-automation\"\n            >\n              <Pause className=\"w-4 h-4 text-amber-600\" />\n              <span className=\"text-sm font-medium text-slate-700\">Pause Automation</span>\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"w-full flex items-center justify-start space-x-3 p-3 h-auto\"\n              onClick={() => handleQuickAction('analytics')}\n              data-testid=\"button-view-analytics\"\n            >\n              <BarChart3 className=\"w-4 h-4 text-purple-600\" />\n              <span className=\"text-sm font-medium text-slate-700\">View Analytics</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recent Activity */}\n      <Card className=\"border border-slate-200\" data-testid=\"recent-activity\">\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold text-slate-900\" data-testid=\"recent-activity-title\">\n            Recent Activity\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-start space-x-3\" data-testid=\"activity-item-1\">\n              <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2\" />\n              <div className=\"flex-1\">\n                <p className=\"text-sm text-slate-700\">Job started video rendering</p>\n                <p className=\"text-xs text-slate-500\">2 minutes ago</p>\n              </div>\n            </div>\n            <div className=\"flex items-start space-x-3\" data-testid=\"activity-item-2\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2\" />\n              <div className=\"flex-1\">\n                <p className=\"text-sm text-slate-700\">Job published to YouTube</p>\n                <p className=\"text-xs text-slate-500\">5 minutes ago</p>\n              </div>\n            </div>\n            <div className=\"flex items-start space-x-3\" data-testid=\"activity-item-3\">\n              <div className=\"w-2 h-2 bg-red-500 rounded-full mt-2\" />\n              <div className=\"flex-1\">\n                <p className=\"text-sm text-slate-700\">Job failed during TTS conversion</p>\n                <p className=\"text-xs text-slate-500\">8 minutes ago</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7870},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { apiRequest, queryClient } from \"./queryClient\";\nimport type { \n  Job, \n  JobWithDetails, \n  Metrics, \n  SystemStatus, \n  JobFilters, \n  PaginatedResponse,\n  InsertJob \n} from \"../types\";\n\nexport class API {\n  // Jobs\n  static async getJobs(params: {\n    page?: number;\n    limit?: number;\n    filters?: JobFilters;\n  } = {}): Promise<PaginatedResponse<Job>> {\n    const searchParams = new URLSearchParams();\n    \n    if (params.page) searchParams.set('page', params.page.toString());\n    if (params.limit) searchParams.set('limit', params.limit.toString());\n    \n    if (params.filters) {\n      Object.entries(params.filters).forEach(([key, value]) => {\n        if (value) searchParams.set(key, value);\n      });\n    }\n\n    const response = await apiRequest('GET', `/api/jobs?${searchParams}`);\n    return response.json();\n  }\n\n  static async getJob(id: string): Promise<JobWithDetails> {\n    const response = await apiRequest('GET', `/api/jobs/${id}`);\n    return response.json();\n  }\n\n  static async createJob(data: Omit<InsertJob, 'status' | 'progress' | 'steps'>): Promise<Job> {\n    const response = await apiRequest('POST', '/api/jobs', data);\n    return response.json();\n  }\n\n  static async publishJob(id: string): Promise<void> {\n    await apiRequest('POST', `/api/jobs/${id}/publish`);\n  }\n\n  static async deleteJob(id: string): Promise<void> {\n    await apiRequest('DELETE', `/api/jobs/${id}`);\n  }\n\n  // System\n  static async getMetrics(): Promise<Metrics> {\n    const response = await apiRequest('GET', '/api/metrics');\n    return response.json();\n  }\n\n  static async getSystemStatus(): Promise<SystemStatus> {\n    const response = await apiRequest('GET', '/api/system/status');\n    return response.json();\n  }\n\n  static async triggerSync(): Promise<void> {\n    await apiRequest('POST', '/api/system/sync');\n  }\n\n  static async pauseAutomation(): Promise<void> {\n    await apiRequest('POST', '/api/system/pause');\n  }\n\n  static async resumeAutomation(): Promise<void> {\n    await apiRequest('POST', '/api/system/resume');\n  }\n\n  // Cache invalidation helpers\n  static invalidateJobs(): void {\n    queryClient.invalidateQueries({ queryKey: ['/api/jobs'] });\n  }\n\n  static invalidateJob(id: string): void {\n    queryClient.invalidateQueries({ queryKey: ['/api/jobs', id] });\n  }\n\n  static invalidateMetrics(): void {\n    queryClient.invalidateQueries({ queryKey: ['/api/metrics'] });\n  }\n\n  static invalidateSystemStatus(): void {\n    queryClient.invalidateQueries({ queryKey: ['/api/system/status'] });\n  }\n}\n","size_bytes":2529},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/create-job.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { z } from \"zod\";\nimport { API } from \"@/lib/api\";\nimport Sidebar from \"@/components/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Save } from \"lucide-react\";\n\nconst createJobSchema = z.object({\n  topic: z.string().min(1, \"Topic is required\").max(100, \"Topic must be less than 100 characters\"),\n  language: z.string().default(\"en\"),\n  targetLength: z.number().min(30, \"Minimum 30 seconds\").max(300, \"Maximum 300 seconds\").default(90),\n  autoPublish: z.boolean().default(false),\n});\n\ntype CreateJobForm = z.infer<typeof createJobSchema>;\n\nconst predefinedTopics = [\n  \"Technology\",\n  \"Artificial Intelligence\", \n  \"Climate Change\",\n  \"Global Politics\",\n  \"Economy\",\n  \"Health & Medicine\",\n  \"Science\",\n  \"Sports\",\n  \"Entertainment\"\n];\n\nconst languages = [\n  { value: \"en\", label: \"English\" },\n  { value: \"es\", label: \"Spanish\" },\n  { value: \"fr\", label: \"French\" },\n  { value: \"de\", label: \"German\" },\n  { value: \"it\", label: \"Italian\" },\n];\n\nconst targetLengths = [\n  { value: 60, label: \"1 minute (60s)\" },\n  { value: 90, label: \"1.5 minutes (90s)\" },\n  { value: 120, label: \"2 minutes (120s)\" },\n  { value: 180, label: \"3 minutes (180s)\" },\n];\n\nexport default function CreateJob() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [customTopic, setCustomTopic] = useState(false);\n\n  const form = useForm<CreateJobForm>({\n    resolver: zodResolver(createJobSchema),\n    defaultValues: {\n      topic: \"\",\n      language: \"en\",\n      targetLength: 90,\n      autoPublish: false,\n    },\n  });\n\n  const createJobMutation = useMutation({\n    mutationFn: API.createJob,\n    onSuccess: (job) => {\n      toast({\n        title: \"Success\",\n        description: `Job ${job.id.slice(0, 8)}... created successfully`,\n      });\n      API.invalidateJobs();\n      setLocation(`/jobs/${job.id}`);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\", \n        description: \"Failed to create job\",\n        variant: \"destructive\",\n      });\n      console.error(\"Create job error:\", error);\n    },\n  });\n\n  const onSubmit = (data: CreateJobForm) => {\n    createJobMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"flex h-screen\" data-testid=\"create-job-page\">\n      <Sidebar />\n      \n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-white border-b border-slate-200 px-6 py-4\" data-testid=\"header\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setLocation(\"/\")}\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n            <div>\n              <h2 className=\"text-2xl font-bold text-slate-900\" data-testid=\"title\">Create New Job</h2>\n              <p className=\"text-slate-600\" data-testid=\"subtitle\">Configure a new automated news video job</p>\n            </div>\n          </div>\n        </header>\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-auto p-6\">\n          <div className=\"max-w-2xl mx-auto\">\n            <Card className=\"border border-slate-200\" data-testid=\"create-job-form\">\n              <CardHeader>\n                <CardTitle className=\"text-lg font-semibold text-slate-900\">Job Configuration</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    {/* Topic Selection */}\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <label className=\"text-sm font-medium text-slate-900\">Topic Selection</label>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"text-sm text-slate-600\">Custom topic</span>\n                          <Switch\n                            checked={customTopic}\n                            onCheckedChange={setCustomTopic}\n                            data-testid=\"switch-custom-topic\"\n                          />\n                        </div>\n                      </div>\n                      \n                      {customTopic ? (\n                        <FormField\n                          control={form.control}\n                          name=\"topic\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormControl>\n                                <Textarea\n                                  placeholder=\"Enter your custom topic or keywords...\"\n                                  className=\"min-h-[100px]\"\n                                  data-testid=\"textarea-custom-topic\"\n                                  {...field}\n                                />\n                              </FormControl>\n                              <FormDescription>\n                                Describe the topic you want to create a video about. Be specific for better results.\n                              </FormDescription>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      ) : (\n                        <FormField\n                          control={form.control}\n                          name=\"topic\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormControl>\n                                <Select value={field.value} onValueChange={field.onChange}>\n                                  <SelectTrigger data-testid=\"select-predefined-topic\">\n                                    <SelectValue placeholder=\"Select a topic\" />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    {predefinedTopics.map((topic) => (\n                                      <SelectItem key={topic} value={topic}>\n                                        {topic}\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                              </FormControl>\n                              <FormDescription>\n                                Choose from our predefined topics for consistent results.\n                              </FormDescription>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      )}\n                    </div>\n\n                    {/* Language */}\n                    <FormField\n                      control={form.control}\n                      name=\"language\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Language</FormLabel>\n                          <FormControl>\n                            <Select value={field.value} onValueChange={field.onChange}>\n                              <SelectTrigger data-testid=\"select-language\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {languages.map((lang) => (\n                                  <SelectItem key={lang.value} value={lang.value}>\n                                    {lang.label}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </FormControl>\n                          <FormDescription>\n                            Language for both content fetching and TTS generation.\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Target Length */}\n                    <FormField\n                      control={form.control}\n                      name=\"targetLength\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Target Video Length</FormLabel>\n                          <FormControl>\n                            <Select \n                              value={field.value.toString()} \n                              onValueChange={(value) => field.onChange(parseInt(value))}\n                            >\n                              <SelectTrigger data-testid=\"select-target-length\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {targetLengths.map((length) => (\n                                  <SelectItem key={length.value} value={length.value.toString()}>\n                                    {length.label}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </FormControl>\n                          <FormDescription>\n                            Target duration for the final video. Actual length may vary slightly.\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Auto Publish */}\n                    <FormField\n                      control={form.control}\n                      name=\"autoPublish\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                          <div className=\"space-y-0.5\">\n                            <FormLabel className=\"text-base\">Auto-publish to YouTube</FormLabel>\n                            <FormDescription>\n                              Automatically publish the video to YouTube when processing is complete.\n                            </FormDescription>\n                          </div>\n                          <FormControl>\n                            <Switch\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"switch-auto-publish\"\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Submit */}\n                    <div className=\"flex items-center space-x-4 pt-6\">\n                      <Button\n                        type=\"submit\"\n                        disabled={createJobMutation.isPending}\n                        className=\"bg-blue-600 hover:bg-blue-700\"\n                        data-testid=\"button-create-job\"\n                      >\n                        <Save className=\"w-4 h-4 mr-2\" />\n                        {createJobMutation.isPending ? \"Creating...\" : \"Create Job\"}\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setLocation(\"/\")}\n                        data-testid=\"button-cancel\"\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":12573},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { API } from \"@/lib/api\";\nimport Sidebar from \"@/components/sidebar\";\nimport KPICards from \"@/components/kpi-cards\";\nimport JobTable from \"@/components/job-table\";\nimport SystemStatus from \"@/components/system-status\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { FolderSync, Plus } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useState } from \"react\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const [isTriggering, setIsTriggering] = useState(false);\n\n  const { data: metrics, isLoading: metricsLoading } = useQuery({\n    queryKey: ['/api/metrics'],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const { data: jobs, isLoading: jobsLoading, refetch: refetchJobs } = useQuery({\n    queryKey: ['/api/jobs'],\n    queryFn: () => API.getJobs({ page: 1, limit: 10 }),\n    refetchInterval: 5000, // Refresh every 5 seconds for live updates\n  });\n\n  const handleTriggerSync = async () => {\n    try {\n      setIsTriggering(true);\n      await API.triggerSync();\n      toast({\n        title: \"Success\",\n        description: \"News sync triggered successfully\",\n      });\n      // Refetch data after sync\n      setTimeout(() => {\n        refetchJobs();\n        API.invalidateMetrics();\n      }, 2000);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to trigger sync\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsTriggering(false);\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen\" data-testid=\"dashboard\">\n      <Sidebar />\n      \n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-white border-b border-slate-200 px-6 py-4\" data-testid=\"header\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-slate-900\" data-testid=\"title\">Dashboard</h2>\n              <p className=\"text-slate-600\" data-testid=\"subtitle\">Monitor your automated news pipeline</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2 text-sm text-slate-500\" data-testid=\"last-sync\">\n                <FolderSync className=\"w-4 h-4\" />\n                <span>Last sync: 2 min ago</span>\n              </div>\n              <Button\n                onClick={handleTriggerSync}\n                disabled={isTriggering}\n                className=\"bg-green-600 hover:bg-green-700\"\n                data-testid=\"button-trigger-sync\"\n              >\n                <FolderSync className={`w-4 h-4 mr-2 ${isTriggering ? 'animate-spin' : ''}`} />\n                Trigger FolderSync\n              </Button>\n              <Link href=\"/jobs/create\">\n                <Button className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"button-create-job\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  New Job\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </header>\n\n        {/* Dashboard Content */}\n        <div className=\"flex-1 overflow-auto p-6\">\n          <KPICards metrics={metrics} isLoading={metricsLoading} />\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mt-8\">\n            <div className=\"lg:col-span-2\">\n              <JobTable \n                jobs={jobs?.data || []} \n                isLoading={jobsLoading}\n                onRefresh={refetchJobs}\n              />\n            </div>\n            \n            <div className=\"space-y-6\">\n              <SystemStatus />\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":3783},"client/src/pages/job-detail.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { API } from \"@/lib/api\";\nimport Sidebar from \"@/components/sidebar\";\nimport JobDetailModal from \"@/components/job-detail-modal\";\n\nexport default function JobDetail() {\n  const params = useParams();\n  const jobId = params.id;\n\n  const { data: job, isLoading, error } = useQuery({\n    queryKey: ['/api/jobs', jobId],\n    enabled: !!jobId,\n    refetchInterval: 5000, // Refresh every 5 seconds for live updates\n  });\n\n  const publishMutation = useMutation({\n    mutationFn: () => API.publishJob(jobId!),\n    onSuccess: () => {\n      API.invalidateJob(jobId!);\n    },\n  });\n\n  if (!jobId) {\n    return <div>Invalid job ID</div>;\n  }\n\n  return (\n    <div className=\"flex h-screen\" data-testid=\"job-detail-page\">\n      <Sidebar />\n      \n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        <div className=\"flex-1 p-6\">\n          <JobDetailModal\n            job={job}\n            isLoading={isLoading}\n            error={error}\n            onPublish={() => publishMutation.mutate()}\n            publishLoading={publishMutation.isPending}\n            inline={true}\n          />\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":1242},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport Sidebar from \"@/components/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Key, \n  Settings as SettingsIcon, \n  Mic, \n  Video, \n  Bell,\n  Save,\n  Eye,\n  EyeOff,\n  AlertCircle\n} from \"lucide-react\";\n\nconst apiKeysSchema = z.object({\n  gnewsApiKey: z.string().optional(),\n  huggingfaceApiKey: z.string().optional(),\n  youtubeClientId: z.string().optional(),\n  youtubeClientSecret: z.string().optional(),\n});\n\nconst automationSchema = z.object({\n  enableDailySync: z.boolean().default(true),\n  syncTimes: z.array(z.string()).default([\"08:00\", \"14:00\", \"20:00\"]),\n  maxJobsPerTopic: z.number().min(1).max(10).default(3),\n  autoPublish: z.boolean().default(false),\n  retryFailedJobs: z.boolean().default(true),\n});\n\nconst voiceSchema = z.object({\n  defaultVoice: z.string().default(\"default\"),\n  speechSpeed: z.number().min(0.5).max(2.0).default(1.0),\n  addPauses: z.boolean().default(true),\n  voiceGender: z.string().default(\"neutral\"),\n});\n\nconst videoSchema = z.object({\n  defaultResolution: z.string().default(\"1080p\"),\n  defaultFrameRate: z.number().default(30),\n  enableSubtitles: z.boolean().default(true),\n  brandingEnabled: z.boolean().default(true),\n  templateTheme: z.string().default(\"professional\"),\n});\n\nconst notificationSchema = z.object({\n  emailNotifications: z.boolean().default(true),\n  jobCompletionAlerts: z.boolean().default(true),\n  errorAlerts: z.boolean().default(true),\n  dailyReports: z.boolean().default(false),\n});\n\ntype ApiKeysForm = z.infer<typeof apiKeysSchema>;\ntype AutomationForm = z.infer<typeof automationSchema>;\ntype VoiceForm = z.infer<typeof voiceSchema>;\ntype VideoForm = z.infer<typeof videoSchema>;\ntype NotificationForm = z.infer<typeof notificationSchema>;\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const [showApiKeys, setShowApiKeys] = useState<Record<string, boolean>>({});\n  const [activeTab, setActiveTab] = useState(\"api-keys\");\n\n  const apiKeysForm = useForm<ApiKeysForm>({\n    resolver: zodResolver(apiKeysSchema),\n    defaultValues: {\n      gnewsApiKey: \"\",\n      huggingfaceApiKey: \"\",\n      youtubeClientId: \"\",\n      youtubeClientSecret: \"\",\n    },\n  });\n\n  const automationForm = useForm<AutomationForm>({\n    resolver: zodResolver(automationSchema),\n    defaultValues: {\n      enableDailySync: true,\n      syncTimes: [\"08:00\", \"14:00\", \"20:00\"],\n      maxJobsPerTopic: 3,\n      autoPublish: false,\n      retryFailedJobs: true,\n    },\n  });\n\n  const voiceForm = useForm<VoiceForm>({\n    resolver: zodResolver(voiceSchema),\n    defaultValues: {\n      defaultVoice: \"default\",\n      speechSpeed: 1.0,\n      addPauses: true,\n      voiceGender: \"neutral\",\n    },\n  });\n\n  const videoForm = useForm<VideoForm>({\n    resolver: zodResolver(videoSchema),\n    defaultValues: {\n      defaultResolution: \"1080p\",\n      defaultFrameRate: 30,\n      enableSubtitles: true,\n      brandingEnabled: true,\n      templateTheme: \"professional\",\n    },\n  });\n\n  const notificationForm = useForm<NotificationForm>({\n    resolver: zodResolver(notificationSchema),\n    defaultValues: {\n      emailNotifications: true,\n      jobCompletionAlerts: true,\n      errorAlerts: true,\n      dailyReports: false,\n    },\n  });\n\n  const onSaveApiKeys = (data: ApiKeysForm) => {\n    console.log(\"Saving API keys:\", data);\n    toast({\n      title: \"Success\",\n      description: \"API keys saved successfully\",\n    });\n  };\n\n  const onSaveAutomation = (data: AutomationForm) => {\n    console.log(\"Saving automation settings:\", data);\n    toast({\n      title: \"Success\", \n      description: \"Automation settings saved successfully\",\n    });\n  };\n\n  const onSaveVoice = (data: VoiceForm) => {\n    console.log(\"Saving voice settings:\", data);\n    toast({\n      title: \"Success\",\n      description: \"Voice settings saved successfully\", \n    });\n  };\n\n  const onSaveVideo = (data: VideoForm) => {\n    console.log(\"Saving video settings:\", data);\n    toast({\n      title: \"Success\",\n      description: \"Video settings saved successfully\",\n    });\n  };\n\n  const onSaveNotifications = (data: NotificationForm) => {\n    console.log(\"Saving notification settings:\", data);\n    toast({\n      title: \"Success\",\n      description: \"Notification settings saved successfully\",\n    });\n  };\n\n  const toggleApiKeyVisibility = (keyName: string) => {\n    setShowApiKeys(prev => ({\n      ...prev,\n      [keyName]: !prev[keyName]\n    }));\n  };\n\n  return (\n    <div className=\"flex h-screen\" data-testid=\"settings-page\">\n      <Sidebar />\n      \n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-white border-b border-slate-200 px-6 py-4\" data-testid=\"header\">\n          <div className=\"flex items-center space-x-4\">\n            <SettingsIcon className=\"w-6 h-6 text-slate-600\" />\n            <div>\n              <h2 className=\"text-2xl font-bold text-slate-900\" data-testid=\"title\">Settings</h2>\n              <p className=\"text-slate-600\" data-testid=\"subtitle\">Configure your AutoNews system preferences</p>\n            </div>\n          </div>\n        </header>\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-auto p-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\" data-testid=\"settings-tabs\">\n              <TabsList className=\"grid grid-cols-5 w-full\">\n                <TabsTrigger value=\"api-keys\" className=\"flex items-center space-x-2\" data-testid=\"tab-api-keys\">\n                  <Key className=\"w-4 h-4\" />\n                  <span>API Keys</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"automation\" className=\"flex items-center space-x-2\" data-testid=\"tab-automation\">\n                  <SettingsIcon className=\"w-4 h-4\" />\n                  <span>Automation</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"voice\" className=\"flex items-center space-x-2\" data-testid=\"tab-voice\">\n                  <Mic className=\"w-4 h-4\" />\n                  <span>Voice</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"video\" className=\"flex items-center space-x-2\" data-testid=\"tab-video\">\n                  <Video className=\"w-4 h-4\" />\n                  <span>Video</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"notifications\" className=\"flex items-center space-x-2\" data-testid=\"tab-notifications\">\n                  <Bell className=\"w-4 h-4\" />\n                  <span>Alerts</span>\n                </TabsTrigger>\n              </TabsList>\n\n              {/* API Keys Tab */}\n              <TabsContent value=\"api-keys\" data-testid=\"tab-content-api-keys\">\n                <Card className=\"border border-slate-200\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Key className=\"w-5 h-5\" />\n                      <span>API Keys Configuration</span>\n                    </CardTitle>\n                    <div className=\"flex items-start space-x-2 p-3 bg-amber-50 border border-amber-200 rounded-lg\">\n                      <AlertCircle className=\"w-4 h-4 text-amber-600 mt-0.5\" />\n                      <div className=\"text-sm text-amber-800\">\n                        <p className=\"font-medium\">Security Notice</p>\n                        <p>API keys are encrypted and stored securely. Never share your keys with unauthorized users.</p>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <Form {...apiKeysForm}>\n                      <form onSubmit={apiKeysForm.handleSubmit(onSaveApiKeys)} className=\"space-y-6\">\n                        {/* GNews API Key */}\n                        <FormField\n                          control={apiKeysForm.control}\n                          name=\"gnewsApiKey\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>GNews API Key</FormLabel>\n                              <FormControl>\n                                <div className=\"relative\">\n                                  <Input\n                                    type={showApiKeys.gnewsApiKey ? \"text\" : \"password\"}\n                                    placeholder=\"Enter your GNews API key\"\n                                    className=\"pr-10\"\n                                    data-testid=\"input-gnews-api-key\"\n                                    {...field}\n                                  />\n                                  <Button\n                                    type=\"button\"\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                                    onClick={() => toggleApiKeyVisibility('gnewsApiKey')}\n                                    data-testid=\"button-toggle-gnews-key\"\n                                  >\n                                    {showApiKeys.gnewsApiKey ? (\n                                      <EyeOff className=\"w-4 h-4 text-slate-400\" />\n                                    ) : (\n                                      <Eye className=\"w-4 h-4 text-slate-400\" />\n                                    )}\n                                  </Button>\n                                </div>\n                              </FormControl>\n                              <FormDescription>\n                                Required for fetching news articles. Get your key from <a href=\"https://gnews.io\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 hover:underline\">gnews.io</a>\n                              </FormDescription>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        {/* Hugging Face API Key */}\n                        <FormField\n                          control={apiKeysForm.control}\n                          name=\"huggingfaceApiKey\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Hugging Face API Key</FormLabel>\n                              <FormControl>\n                                <div className=\"relative\">\n                                  <Input\n                                    type={showApiKeys.huggingfaceApiKey ? \"text\" : \"password\"}\n                                    placeholder=\"Enter your Hugging Face API key\"\n                                    className=\"pr-10\"\n                                    data-testid=\"input-huggingface-api-key\"\n                                    {...field}\n                                  />\n                                  <Button\n                                    type=\"button\"\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                                    onClick={() => toggleApiKeyVisibility('huggingfaceApiKey')}\n                                    data-testid=\"button-toggle-hf-key\"\n                                  >\n                                    {showApiKeys.huggingfaceApiKey ? (\n                                      <EyeOff className=\"w-4 h-4 text-slate-400\" />\n                                    ) : (\n                                      <Eye className=\"w-4 h-4 text-slate-400\" />\n                                    )}\n                                  </Button>\n                                </div>\n                              </FormControl>\n                              <FormDescription>\n                                Required for AI summarization. Get your key from <a href=\"https://huggingface.co\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 hover:underline\">huggingface.co</a>\n                              </FormDescription>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <Separator />\n\n                        {/* YouTube API Credentials */}\n                        <div className=\"space-y-4\">\n                          <h4 className=\"text-md font-semibold text-slate-900\">YouTube API Credentials</h4>\n                          \n                          <FormField\n                            control={apiKeysForm.control}\n                            name=\"youtubeClientId\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>YouTube Client ID</FormLabel>\n                                <FormControl>\n                                  <div className=\"relative\">\n                                    <Input\n                                      type={showApiKeys.youtubeClientId ? \"text\" : \"password\"}\n                                      placeholder=\"Enter your YouTube Client ID\"\n                                      className=\"pr-10\"\n                                      data-testid=\"input-youtube-client-id\"\n                                      {...field}\n                                    />\n                                    <Button\n                                      type=\"button\"\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                                      onClick={() => toggleApiKeyVisibility('youtubeClientId')}\n                                      data-testid=\"button-toggle-youtube-id\"\n                                    >\n                                      {showApiKeys.youtubeClientId ? (\n                                        <EyeOff className=\"w-4 h-4 text-slate-400\" />\n                                      ) : (\n                                        <Eye className=\"w-4 h-4 text-slate-400\" />\n                                      )}\n                                    </Button>\n                                  </div>\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={apiKeysForm.control}\n                            name=\"youtubeClientSecret\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>YouTube Client Secret</FormLabel>\n                                <FormControl>\n                                  <div className=\"relative\">\n                                    <Input\n                                      type={showApiKeys.youtubeClientSecret ? \"text\" : \"password\"}\n                                      placeholder=\"Enter your YouTube Client Secret\"\n                                      className=\"pr-10\"\n                                      data-testid=\"input-youtube-client-secret\"\n                                      {...field}\n                                    />\n                                    <Button\n                                      type=\"button\"\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                                      onClick={() => toggleApiKeyVisibility('youtubeClientSecret')}\n                                      data-testid=\"button-toggle-youtube-secret\"\n                                    >\n                                      {showApiKeys.youtubeClientSecret ? (\n                                        <EyeOff className=\"w-4 h-4 text-slate-400\" />\n                                      ) : (\n                                        <Eye className=\"w-4 h-4 text-slate-400\" />\n                                      )}\n                                    </Button>\n                                  </div>\n                                </FormControl>\n                                <FormDescription>\n                                  Required for YouTube publishing. Set up OAuth 2.0 credentials in <a href=\"https://console.cloud.google.com\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 hover:underline\">Google Cloud Console</a>\n                                </FormDescription>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <Button type=\"submit\" className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"button-save-api-keys\">\n                          <Save className=\"w-4 h-4 mr-2\" />\n                          Save API Keys\n                        </Button>\n                      </form>\n                    </Form>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Automation Tab */}\n              <TabsContent value=\"automation\" data-testid=\"tab-content-automation\">\n                <Card className=\"border border-slate-200\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <SettingsIcon className=\"w-5 h-5\" />\n                      <span>Automation Settings</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <Form {...automationForm}>\n                      <form onSubmit={automationForm.handleSubmit(onSaveAutomation)} className=\"space-y-6\">\n                        <FormField\n                          control={automationForm.control}\n                          name=\"enableDailySync\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                              <div className=\"space-y-0.5\">\n                                <FormLabel className=\"text-base\">Enable Daily News Sync</FormLabel>\n                                <FormDescription>\n                                  Automatically fetch and process trending news articles daily\n                                </FormDescription>\n                              </div>\n                              <FormControl>\n                                <Switch\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                  data-testid=\"switch-enable-daily-sync\"\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={automationForm.control}\n                          name=\"maxJobsPerTopic\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Max Jobs Per Topic</FormLabel>\n                              <FormControl>\n                                <Select value={field.value.toString()} onValueChange={(value) => field.onChange(parseInt(value))}>\n                                  <SelectTrigger data-testid=\"select-max-jobs\">\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    {[1, 2, 3, 4, 5].map((num) => (\n                                      <SelectItem key={num} value={num.toString()}>\n                                        {num} job{num > 1 ? 's' : ''} per topic\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                              </FormControl>\n                              <FormDescription>\n                                Maximum number of jobs to create per topic during automated sync\n                              </FormDescription>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={automationForm.control}\n                          name=\"autoPublish\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                              <div className=\"space-y-0.5\">\n                                <FormLabel className=\"text-base\">Auto-publish Videos</FormLabel>\n                                <FormDescription>\n                                  Automatically publish completed videos to YouTube\n                                </FormDescription>\n                              </div>\n                              <FormControl>\n                                <Switch\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                  data-testid=\"switch-auto-publish\"\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={automationForm.control}\n                          name=\"retryFailedJobs\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                              <div className=\"space-y-0.5\">\n                                <FormLabel className=\"text-base\">Retry Failed Jobs</FormLabel>\n                                <FormDescription>\n                                  Automatically retry jobs that fail due to temporary issues\n                                </FormDescription>\n                              </div>\n                              <FormControl>\n                                <Switch\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                  data-testid=\"switch-retry-failed\"\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n\n                        <Button type=\"submit\" className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"button-save-automation\">\n                          <Save className=\"w-4 h-4 mr-2\" />\n                          Save Automation Settings\n                        </Button>\n                      </form>\n                    </Form>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Voice Tab */}\n              <TabsContent value=\"voice\" data-testid=\"tab-content-voice\">\n                <Card className=\"border border-slate-200\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Mic className=\"w-5 h-5\" />\n                      <span>Voice & TTS Settings</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <Form {...voiceForm}>\n                      <form onSubmit={voiceForm.handleSubmit(onSaveVoice)} className=\"space-y-6\">\n                        <FormField\n                          control={voiceForm.control}\n                          name=\"defaultVoice\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Default Voice</FormLabel>\n                              <FormControl>\n                                <Select value={field.value} onValueChange={field.onChange}>\n                                  <SelectTrigger data-testid=\"select-default-voice\">\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    <SelectItem value=\"default\">Default Voice</SelectItem>\n                                    <SelectItem value=\"professional\">Professional Male</SelectItem>\n                                    <SelectItem value=\"professional-female\">Professional Female</SelectItem>\n                                    <SelectItem value=\"news-anchor\">News Anchor</SelectItem>\n                                    <SelectItem value=\"british\">British Accent</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                              </FormControl>\n                              <FormDescription>\n                                Default voice to use for text-to-speech conversion\n                              </FormDescription>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={voiceForm.control}\n                          name=\"speechSpeed\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Speech Speed: {field.value}x</FormLabel>\n                              <FormControl>\n                                <div className=\"px-3\">\n                                  <input\n                                    type=\"range\"\n                                    min=\"0.5\"\n                                    max=\"2.0\"\n                                    step=\"0.1\"\n                                    value={field.value}\n                                    onChange={(e) => field.onChange(parseFloat(e.target.value))}\n                                    className=\"w-full h-2 bg-slate-200 rounded-lg appearance-none cursor-pointer\"\n                                    data-testid=\"slider-speech-speed\"\n                                  />\n                                  <div className=\"flex justify-between text-xs text-slate-500 mt-1\">\n                                    <span>0.5x</span>\n                                    <span>1.0x</span>\n                                    <span>2.0x</span>\n                                  </div>\n                                </div>\n                              </FormControl>\n                              <FormDescription>\n                                Adjust the speaking speed for generated audio\n                              </FormDescription>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={voiceForm.control}\n                          name=\"addPauses\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                              <div className=\"space-y-0.5\">\n                                <FormLabel className=\"text-base\">Add Natural Pauses</FormLabel>\n                                <FormDescription>\n                                  Insert pauses at sentence boundaries for better flow\n                                </FormDescription>\n                              </div>\n                              <FormControl>\n                                <Switch\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                  data-testid=\"switch-add-pauses\"\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n\n                        <Button type=\"submit\" className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"button-save-voice\">\n                          <Save className=\"w-4 h-4 mr-2\" />\n                          Save Voice Settings\n                        </Button>\n                      </form>\n                    </Form>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Video Tab */}\n              <TabsContent value=\"video\" data-testid=\"tab-content-video\">\n                <Card className=\"border border-slate-200\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Video className=\"w-5 h-5\" />\n                      <span>Video Rendering Settings</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <Form {...videoForm}>\n                      <form onSubmit={videoForm.handleSubmit(onSaveVideo)} className=\"space-y-6\">\n                        <FormField\n                          control={videoForm.control}\n                          name=\"defaultResolution\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Default Resolution</FormLabel>\n                              <FormControl>\n                                <Select value={field.value} onValueChange={field.onChange}>\n                                  <SelectTrigger data-testid=\"select-resolution\">\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    <SelectItem value=\"720p\">720p (HD)</SelectItem>\n                                    <SelectItem value=\"1080p\">1080p (Full HD)</SelectItem>\n                                    <SelectItem value=\"1440p\">1440p (2K)</SelectItem>\n                                    <SelectItem value=\"2160p\">2160p (4K)</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                              </FormControl>\n                              <FormDescription>\n                                Default video resolution for rendered content\n                              </FormDescription>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={videoForm.control}\n                          name=\"templateTheme\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Template Theme</FormLabel>\n                              <FormControl>\n                                <Select value={field.value} onValueChange={field.onChange}>\n                                  <SelectTrigger data-testid=\"select-template\">\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    <SelectItem value=\"professional\">Professional</SelectItem>\n                                    <SelectItem value=\"modern\">Modern</SelectItem>\n                                    <SelectItem value=\"minimal\">Minimal</SelectItem>\n                                    <SelectItem value=\"news\">News Style</SelectItem>\n                                    <SelectItem value=\"tech\">Tech Focus</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                              </FormControl>\n                              <FormDescription>\n                                Visual theme template for video generation\n                              </FormDescription>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={videoForm.control}\n                          name=\"enableSubtitles\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                              <div className=\"space-y-0.5\">\n                                <FormLabel className=\"text-base\">Enable Subtitles</FormLabel>\n                                <FormDescription>\n                                  Generate and burn subtitles into the video\n                                </FormDescription>\n                              </div>\n                              <FormControl>\n                                <Switch\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                  data-testid=\"switch-enable-subtitles\"\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={videoForm.control}\n                          name=\"brandingEnabled\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                              <div className=\"space-y-0.5\">\n                                <FormLabel className=\"text-base\">Enable Branding</FormLabel>\n                                <FormDescription>\n                                  Include logo and brand elements in videos\n                                </FormDescription>\n                              </div>\n                              <FormControl>\n                                <Switch\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                  data-testid=\"switch-enable-branding\"\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n\n                        <Button type=\"submit\" className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"button-save-video\">\n                          <Save className=\"w-4 h-4 mr-2\" />\n                          Save Video Settings\n                        </Button>\n                      </form>\n                    </Form>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Notifications Tab */}\n              <TabsContent value=\"notifications\" data-testid=\"tab-content-notifications\">\n                <Card className=\"border border-slate-200\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Bell className=\"w-5 h-5\" />\n                      <span>Notification Settings</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <Form {...notificationForm}>\n                      <form onSubmit={notificationForm.handleSubmit(onSaveNotifications)} className=\"space-y-6\">\n                        <FormField\n                          control={notificationForm.control}\n                          name=\"emailNotifications\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                              <div className=\"space-y-0.5\">\n                                <FormLabel className=\"text-base\">Email Notifications</FormLabel>\n                                <FormDescription>\n                                  Receive notifications via email\n                                </FormDescription>\n                              </div>\n                              <FormControl>\n                                <Switch\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                  data-testid=\"switch-email-notifications\"\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={notificationForm.control}\n                          name=\"jobCompletionAlerts\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                              <div className=\"space-y-0.5\">\n                                <FormLabel className=\"text-base\">Job Completion Alerts</FormLabel>\n                                <FormDescription>\n                                  Get notified when jobs complete successfully\n                                </FormDescription>\n                              </div>\n                              <FormControl>\n                                <Switch\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                  data-testid=\"switch-job-completion\"\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={notificationForm.control}\n                          name=\"errorAlerts\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                              <div className=\"space-y-0.5\">\n                                <FormLabel className=\"text-base\">Error Alerts</FormLabel>\n                                <FormDescription>\n                                  Get notified immediately when jobs fail\n                                </FormDescription>\n                              </div>\n                              <FormControl>\n                                <Switch\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                  data-testid=\"switch-error-alerts\"\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={notificationForm.control}\n                          name=\"dailyReports\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                              <div className=\"space-y-0.5\">\n                                <FormLabel className=\"text-base\">Daily Reports</FormLabel>\n                                <FormDescription>\n                                  Receive daily summary reports of system activity\n                                </FormDescription>\n                              </div>\n                              <FormControl>\n                                <Switch\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                  data-testid=\"switch-daily-reports\"\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n\n                        <Button type=\"submit\" className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"button-save-notifications\">\n                          <Save className=\"w-4 h-4 mr-2\" />\n                          Save Notification Settings\n                        </Button>\n                      </form>\n                    </Form>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":41547},"client/src/types/index.ts":{"content":"export interface Job {\n  id: string;\n  topic: string;\n  language: string;\n  targetLength: number;\n  autoPublish: boolean;\n  status: 'queued' | 'running' | 'completed' | 'failed';\n  progress: number;\n  steps: string[];\n  error?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface JobWithDetails extends Job {\n  article?: Article;\n  summary?: Summary;\n  audio?: AudioFile;\n  video?: Video;\n  publications?: Publication[];\n}\n\nexport interface Article {\n  id: string;\n  jobId: string;\n  source: string;\n  url: string;\n  title: string;\n  content: string;\n  contentHash: string;\n  mediaUrl?: string;\n  publishedAt?: string;\n  createdAt: string;\n}\n\nexport interface Summary {\n  id: string;\n  jobId: string;\n  text: string;\n  wordCount: number;\n  language: string;\n  qualityFlags: Record<string, any>;\n  createdAt: string;\n}\n\nexport interface AudioFile {\n  id: string;\n  jobId: string;\n  url: string;\n  duration: number;\n  sampleRate: number;\n  format: string;\n  size?: number;\n  createdAt: string;\n}\n\nexport interface Video {\n  id: string;\n  jobId: string;\n  urlMp4: string;\n  urlSrt?: string;\n  urlThumb?: string;\n  width: number;\n  height: number;\n  duration: number;\n  size?: number;\n  createdAt: string;\n}\n\nexport interface Publication {\n  id: string;\n  jobId: string;\n  platform: string;\n  videoId: string;\n  status: string;\n  publishedAt?: string;\n  createdAt: string;\n}\n\nexport interface SystemStatus {\n  gnews: ServiceStatus;\n  nlp: ServiceStatus;\n  video: ServiceStatus;\n  youtube: ServiceStatus;\n}\n\nexport interface ServiceStatus {\n  status: 'operational' | 'degraded' | 'down';\n  message?: string;\n}\n\nexport interface Metrics {\n  jobsToday: number;\n  successRate: number;\n  avgRenderTime: string;\n  published: number;\n  activeJobs: number;\n  totalJobs: number;\n}\n\nexport interface Activity {\n  id: string;\n  message: string;\n  timestamp: string;\n  type: 'info' | 'success' | 'error' | 'warning';\n}\n\nexport interface JobFilters {\n  status?: string;\n  topic?: string;\n  language?: string;\n  dateFrom?: string;\n  dateTo?: string;\n}\n\nexport interface PaginatedResponse<T> {\n  data: T[];\n  total: number;\n  page: number;\n  limit: number;\n  totalPages: number;\n}\n","size_bytes":2180},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}